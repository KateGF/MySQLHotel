--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  martes-mayo-23-2023   
--  SQLINES DEMO *** ------------------------------------
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_AMENITY
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_AMENITY`', 27, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_AMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_AMENITYXROOM`', 5, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_CANTON
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_CANTON`', 10, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_COUNTRY
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_COUNTRY`', 7, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_DISCOUNT
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_DISCOUNT`', 7, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_DISTRICT
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_DISTRICT`', 7, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_EMAIL
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_EMAIL`', 7, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_FAVORITE
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_FAVORITE`', 3, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_FEEDBACK
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_FEEDBACK`', 0, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_GENDER
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_GENDER`', 6, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_HOTEL
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_HOTEL`', 20, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_HOTELCLASIFICATION
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_HOTELCLASIFICATION`', 11, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_IDTYPE
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_IDTYPE`', 8, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_NATIONALITY
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_NATIONALITY`', 3, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_PARAMETER
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_PARAMETER`', 2, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_PAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_PAYMENTMETHOD`', 4, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_PAYMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_PAYMENTMETHODXHOTEL`', 8, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_PENALTY
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_PENALTY`', 3, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_PHONENUMBER
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_PHONENUMBER`', 7, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_PHOTO
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_PHOTO`', 0, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_RESERVATION
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_RESERVATION`', 24, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_RESERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_RESERVATIONXROOM`', 19, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_REVIEW
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_REVIEW`', 7, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_ROOM
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_ROOM`', 12, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_ROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_ROOMCATEGORY`', 4, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_STATE
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_STATE`', 8, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_USER
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_USER`', 28, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_USERTYPE
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_USERTYPE`', 4, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_USERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_USERXNATIONALITY`', 25, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO ***  S_USERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

   CALL  CreateSequence('`KT`.`S_USERXPHONENUMBER`', 11, 1)   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ENITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`AMENITY` 
   (	`IDAMENITY` INT, 
	`NAME` VARCHAR(35), 
	`IDHOTEL` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`AMENITYXROOM` 
   (	`IDAMENITYXROOM` INT, 
	`IDAMENITY` INT, 
	`IDROOM` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** NTON
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`CANTON` 
   (	`IDCANTON` INT, 
	`NAME` VARCHAR(35), 
	`IDSTATE` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** UNTRY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`COUNTRY` 
   (	`IDCOUNTRY` INT, 
	`NAME` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** SCOUNT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`DISCOUNT` 
   (	`IDDISCOUNT` INT, 
	`EXPIREDATE` DATETIME, 
	`CODE` VARCHAR(35), 
	`PERCENTAGE` DECIMAL(5,2), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** STRICT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`DISTRICT` 
   (	`IDDISTRICT` INT, 
	`NAME` VARCHAR(35), 
	`IDCANTON` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** AIL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`EMAIL` 
   (	`IDEMAIL` INT, 
	`ELECTRONICMAIL` VARCHAR(35), 
	`IDUSER` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** VORITE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`FAVORITE` 
   (	`IDFAVORITE` INT, 
	`IDUSER` INT, 
	`IDHOTEL` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** EDBACK
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`FEEDBACK` 
   (	`IDFEEDBACK` INT, 
	`COMMMENT` VARCHAR(35), 
	`IDRESERVATION` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** NDER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`GENDER` 
   (	`IDGENDER` INT, 
	`TYPE` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** TEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`HOTEL` 
   (	`IDHOTEL` INT, 
	`NAME` VARCHAR(35), 
	`REGISTERDATE` DATETIME, 
	`IDDISTRICT` INT, 
	`IDCLASIFICATION` INT, 
	`IDDISCOUNT` INT, 
	`CREATIONUSERS` VARCHAR(10), 
	`MODUSERS` VARCHAR(10), 
	`CREATIONDATE` DATETIME, 
	`MODDATE` DATETIME
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** TELCLASIFICATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`HOTELCLASIFICATION` 
   (	`IDHOTELCLASIFICATION` INT, 
	`NAME` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** TYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`IDTYPE` 
   (	`IDIDTYPE` INT, 
	`MASK` VARCHAR(35), 
	`NAME` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** TIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`NATIONALITY` 
   (	`IDNATIONALITY` INT, 
	`NAME` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** RAMETER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`PARAMETER` 
   (	`IDPARAMETER` INT, 
	`NAME` VARCHAR(35), 
	`VALUE` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** YMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`PAYMENTMETHOD` 
   (	`IDPAYMENTMETHOD` INT, 
	`NAMEPAYMENTMETHOD` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** YMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`PAYMENTMETHODXHOTEL` 
   (	`IDPAYMENTMETHODXHOTEL` INT, 
	`IDPAYMENTMETHOD` INT, 
	`IDHOTEL` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** NALTY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`PENALTY` 
   (	`IDPENALTY` INT, 
	`DAYS` VARCHAR(35), 
	`TIME` SMALLINT, 
	`MONEY` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`PHONENUMBER` 
   (	`IDPHONENUMBER` INT, 
	`PHONENUMBER` BIGINT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** OTO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`PHOTO` 
   (	`IDPHOTO` INT, 
	`PICTURE` VARCHAR(200), 
	`IDHOTEL` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** SERVATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`RESERVATION` 
   (	`IDRESERVATION` INT, 
	`IDUSER` INT, 
	`IDPAYMENT` INT, 
	`IDPENALTY` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** SERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`RESERVATIONXROOM` 
   (	`IDRESERVATIONXROOM` INT, 
	`ADMINPRICE` DECIMAL(10,2), 
	`CHECKIN` DATETIME, 
	`CHECKOUT` DATETIME, 
	`IDRESERVATION` INT, 
	`IDROOM` INT, 
	`IDDISCOUNT` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** VIEW
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`REVIEW` 
   (	`IDREVIEW` INT, 
	`STAR` TINYINT, 
	`IDRESERVATION` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
--  DDL for Table ROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`ROOM` 
   (	`IDROOM` INT, 
	`NAME` VARCHAR(35), 
	`CAPACITY` TINYINT, 
	`RECOMMENDEDPRICE` DECIMAL(10,2), 
	`IDHOTEL` INT, 
	`IDROOMCATEGORY` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** OMCATEGORY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`ROOMCATEGORY` 
   (	`IDROOMCATEGORY` INT, 
	`NAME` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ATE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`STATE` 
   (	`IDSTATE` INT, 
	`NAME` VARCHAR(35), 
	`IDCOUNTRY` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ERS
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`USERS` 
   (	`IDUSER` INT, 
	`PHOTO` VARCHAR(200), 
	`IDENTIFICATIONCARD` VARCHAR(35), 
	`FIRSTNAME` VARCHAR(35), 
	`MIDDLENAME` VARCHAR(35), 
	`LASTNAME` VARCHAR(35), 
	`SECONDSURNAME` VARCHAR(35), 
	`USERNAME` VARCHAR(35), 
	`PASSWORD` VARCHAR(35), 
	`BIRTHDATE` DATETIME, 
	`IDDISTRICT` INT, 
	`IDTYPE` INT, 
	`IDGENDER` INT, 
	`IDUSERTYPE` INT, 
	`IDHOTELADMIN` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ERTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`USERTYPE` 
   (	`IDUSERTYPE` INT, 
	`DESCRIPTION` VARCHAR(35), 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`USERXNATIONALITY` 
   (	`IDUSERXNATIONALITY` INT, 
	`IDUSER` INT, 
	`IDNATIONALITY` SMALLINT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** ERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE TABLE `KT`.`USERXPHONENUMBER` 
   (	`IDUSERXPHONENUMBER` INT, 
	`IDUSER` INT, 
	`IDPHONENUMBER` INT, 
	`CREATIONDATE` DATETIME, 
	`CREATIONUSER` VARCHAR(10), 
	`MODDATE` DATETIME, 
	`MODUSER` VARCHAR(10)
   ) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** NITYXROOMVIEW
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE OR REPLACE VIEW `KT`.`AMENITYXROOMVIEW` (`IDAMENITY`, `IDROOM`, `NAME`) AS 
  select amenity.idamenity,idroom,name from amenityxroom
 inner join amenity 
 on amenity.idamenity = amenityxroom.idamenity
;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** WALLUSERSINFO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE OR REPLACE VIEW `KT`.`VIEWALLUSERSINFO` (`IDUSER`, `USERNAME`, `PASSWORD`, `FIRSTNAME`, `NAME`, `IDTYPE`, `GENDER`, `IDUSERTYPE`, `IDUSERTYPEDESC`) AS 
  SELECT
    users.idUser as idUser,users.username as username,users.password as password,
    users.firstName as firstName,
    district.name as name , idType.name as idType, gender.type as gender,
    usertype.idUserType as idUserType,
    usertype.description as idUserTypeDesc
FROM
    users
INNER JOIN district ON
    users.iddistrict = district.iddistrict
INNER JOIN idType ON
    users.idType = idType.ididType
INNER JOIN gender ON
    users.idgender = gender.idgender
INNER JOIN usertype ON
    users.idusertype = usertype.idusertype
;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** WHOTELINFO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE OR REPLACE VIEW `KT`.`VIEWHOTELINFO` (`IDHOTEL`, `NAME`, `IDDISCOUNT`, `IDDISTRICT`, `DISCOUNT`, `DISTRICT`, `CANTON`, `STATE`, `COUNTRY`) AS 
  select 
hotel.idhotel, hotel.name, hotel.iddiscount, hotel.iddistrict, discount.percentage as discount, district.name as District, canton.name as Canton, state.name as state, country.name as country
from hotel 
inner join hotelclasification on hotelclasification.idhotelclasification = hotel.idclasification
inner join discount on discount.iddiscount = hotel.iddiscount
inner join district on district.iddistrict = hotel.iddistrict
inner join canton on canton.idcanton = district.idcanton
inner join state on state.idstate = canton.idstate
inner join country on country.idcountry = state.idcountry
;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** WRESERVATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE OR REPLACE VIEW `KT`.`VIEWRESERVATION` (`IDUSER`, `IDRESERVATION`, `ADMINPRICE`, `FIRSTNAME`, `ROOM`, `IDROOM`, `CAPACITY`, `NAMEPAYMENTMETHOD`, `ROOMCATEGORY`, `IDHOTEL`, `HOTELNAME`) AS 
  SELECT
   users.idUser,reservation.idReservation , 
   reservationxroom.adminprice, users.firstName, 
   room.name as Room,room.idroom,room.capacity,paymentmethod.namepaymentmethod,roomcategory.name as roomcategory, hotel.idHotel,hotel.name as hotelName
FROM
    reservation  
INNER JOIN reservationxroom ON
    reservation.idreservation = reservationxroom.idreservation
INNER JOIN users ON
    reservation.idUser = users.idUser 
INNER JOIN room ON
    reservationxroom.idRoom = room.idRoom 
INNER JOIN hotel ON
    room.idHotel = hotel.idHotel
INNER JOIN roomcategory ON
    room.idRoomCategory = roomcategory.idRoomCategory
INNER JOIN paymentmethod ON
    reservation.idPayment = paymentmethod.idPaymentMethod
;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** WREVIEWSHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE OR REPLACE VIEW `KT`.`VIEWREVIEWSHOTEL` (`HOTELNAME`, `IDHOTEL`, `ROOMNAME`, `CHECKIN`, `CHECKOUT`, `IDRESERVATION`, `FIRSTNAME`, `LASTNAME`, `STAR`) AS 
  SELECT h.Name AS HOTELNAME,
       h.idHotel,
       ro.Name AS ROOMNAME,
       rxr.CheckIn,
       rxr.CheckOut,
       re.idReservation,
       u.FirstName,
       u.LastName,
       rev.Star
FROM Hotel h
INNER JOIN Room ro ON h.idHotel = ro.idHotel
INNER JOIN ReservationXRoom rxr ON ro.idRoom = rxr.idRoom
INNER JOIN Reservation re ON rxr.idReservation = re.idReservation
INNER JOIN Users u ON re.idUser = u.idUser
INNER JOIN Review rev ON re.idreservation = rev.idreservation
;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** WROOMSHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE OR REPLACE VIEW `KT`.`VIEWROOMSHOTEL` (`HOTELNAME`, `IDHOTEL`, `ROOMNAME`, `CAPACITY`, `RECOMMENDEDPRICE`) AS 
  SELECT h.Name AS HOTELNAME,
       h.idHotel,
       ro.Name AS ROOMNAME,
       ro.Capacity,
       ro.RecommendedPrice
FROM Hotel h
INNER JOIN Room ro ON h.idHotel = ro.idHotel
;
-- INSERTING into KT.AMENITY
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('22','Bathtub','13',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('25','Gym','13',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('26','Balcony','13',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','Seaview',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','Balcony',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','Bathtub',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10','Seaview',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('11','Balcony',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('12','Bathtub',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('13','Gym','7',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('14','Spa','8',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('15','Pool',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('16','Seaview',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('17','Balcony',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('18','Bathtub',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('19','Seaview','13',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITY (IDAMENITY,NAME,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('23','Seaview','16',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- INSERTING into KT.AMENITYXROOM
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOM (IDAMENITYXROOM,IDAMENITY,IDROOM,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','5','3',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOM (IDAMENITYXROOM,IDAMENITY,IDROOM,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','5','3',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOM (IDAMENITYXROOM,IDAMENITY,IDROOM,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','6','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOM (IDAMENITYXROOM,IDAMENITY,IDROOM,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','10','3',null,null,null,null);
-- INSERTING into KT.CANTON
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.CANTON (IDCANTON,NAME,IDSTATE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','Montes de Oca','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.CANTON (IDCANTON,NAME,IDSTATE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','San Carlos','6',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.CANTON (IDCANTON,NAME,IDSTATE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','Para¿so','7',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.CANTON (IDCANTON,NAME,IDSTATE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','Montes de Oca','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.CANTON (IDCANTON,NAME,IDSTATE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','San Carlos','6',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.CANTON (IDCANTON,NAME,IDSTATE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','Paraiso','7',null,null,null,null);
-- INSERTING into KT.COUNTRY
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.COUNTRY (IDCOUNTRY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','Costa Rica',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.COUNTRY (IDCOUNTRY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','Nicaragua',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.COUNTRY (IDCOUNTRY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','Brasil',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.COUNTRY (IDCOUNTRY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','Costa Rica',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.COUNTRY (IDCOUNTRY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','Nicaragua',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.COUNTRY (IDCOUNTRY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','Brasil',null,null,null,null);
-- INSERTING into KT.DISCOUNT
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.DISCOUNT (IDDISCOUNT,EXPIREDATE,CODE,PERCENTAGE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1',str_to_date('30/05/23','%d/%m/%y'),'EOTM','15',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.DISCOUNT (IDDISCOUNT,EXPIREDATE,CODE,PERCENTAGE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2',str_to_date('11/05/95','%d/%m/%y'),'D15C0UNT','10',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.DISCOUNT (IDDISCOUNT,EXPIREDATE,CODE,PERCENTAGE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4',str_to_date('02/06/23','%d/%m/%y'),'MIDY','5',null,null,null,null);
-- INSERTING into KT.DISTRICT
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.DISTRICT (IDDISTRICT,NAME,IDCANTON,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','Sabanilla','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.DISTRICT (IDDISTRICT,NAME,IDCANTON,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','Fortuna','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.DISTRICT (IDDISTRICT,NAME,IDCANTON,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','Orosi','6',null,null,null,null);
-- INSERTING into KT.EMAIL
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.EMAIL (IDEMAIL,ELECTRONICMAIL,IDUSER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','carlos01@gmail.com','7',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.EMAIL (IDEMAIL,ELECTRONICMAIL,IDUSER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','emi90@gmail.com','12',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.EMAIL (IDEMAIL,ELECTRONICMAIL,IDUSER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','andre14@gmail.com','14',null,null,null,null);
-- INSERTING into KT.FAVORITE
/* SET DEFINE OFF; */
-- INSERTING into KT.FEEDBACK
/* SET DEFINE OFF; */
-- INSERTING into KT.GENDER
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.GENDER (IDGENDER,TYPE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','Masculino',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.GENDER (IDGENDER,TYPE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','Femenino',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.GENDER (IDGENDER,TYPE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','Otro',null,null,null,null);
-- INSERTING into KT.HOTEL
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('19','Luz',str_to_date('20/05/23','%d/%m/%y'),'6','1','2','KT','KT',str_to_date('19/05/23','%d/%m/%y'),str_to_date('19/05/23','%d/%m/%y'));
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('16','Guanabana',str_to_date('12/05/23','%d/%m/%y'),'6','1','2','KT','KT',str_to_date('19/05/23','%d/%m/%y'),str_to_date('19/05/23','%d/%m/%y'));
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('7','Kibi Kibi',str_to_date('11/05/23','%d/%m/%y'),'5','2','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('8','Kibi Kibi',str_to_date('11/05/23','%d/%m/%y'),'5','2','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('9','Arenal Secret Garden',str_to_date('12/05/23','%d/%m/%y'),'6','3','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('13','Casa Bartzis',str_to_date('09/10/15','%d/%m/%y'),'4','2','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('15','Kat Hotel',str_to_date('12/05/23','%d/%m/%y'),'6','1','2','KT','KT',str_to_date('19/05/23','%d/%m/%y'),str_to_date('19/05/23','%d/%m/%y'));
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTEL (IDHOTEL,NAME,REGISTERDATE,IDDISTRICT,IDCLASIFICATION,IDDISCOUNT,CREATIONUSERS,MODUSERS,CREATIONDATE,MODDATE) values ('17','Hello',str_to_date('10/05/23','%d/%m/%y'),'6','1','2','KT','KT',str_to_date('19/05/23','%d/%m/%y'),str_to_date('19/05/23','%d/%m/%y'));
-- INSERTING into KT.HOTELCLASIFICATION
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','3',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','3',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.HOTELCLASIFICATION (IDHOTELCLASIFICATION,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10','1',null,null,null,null);
-- INSERTING into KT.IDTYPE
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.IDTYPE (IDIDTYPE,MASK,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','XX-XXXX-XXXX','Cedula Fisica',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.IDTYPE (IDIDTYPE,MASK,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','X-XXX-XXXXXX','Cedula Juridica',null,null,null,null);
-- INSERTING into KT.NATIONALITY
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.NATIONALITY (IDNATIONALITY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','Costarricense',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.NATIONALITY (IDNATIONALITY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','Estadounidense',null,null,null,null);
-- INSERTING into KT.PARAMETER
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PARAMETER (IDPARAMETER,NAME,VALUE,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','IVA','13',null,null,null,null);
-- INSERTING into KT.PAYMENTMETHOD
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHOD (IDPAYMENTMETHOD,NAMEPAYMENTMETHOD,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','Visa',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHOD (IDPAYMENTMETHOD,NAMEPAYMENTMETHOD,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','MasterCard',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHOD (IDPAYMENTMETHOD,NAMEPAYMENTMETHOD,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','American Express',null,null,null,null);
-- INSERTING into KT.PAYMENTMETHODXHOTEL
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','1','7',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','2','8',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','3','9',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','1','13',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','2','7',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','1','8',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PAYMENTMETHODXHOTEL (IDPAYMENTMETHODXHOTEL,IDPAYMENTMETHOD,IDHOTEL,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','2','9',null,null,null,null);
-- INSERTING into KT.PENALTY
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PENALTY (IDPENALTY,DAYS,TIME,MONEY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','2',null,null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PENALTY (IDPENALTY,DAYS,TIME,MONEY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2',null,null,'15000',null,null,null,null);
-- INSERTING into KT.PHONENUMBER
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PHONENUMBER (IDPHONENUMBER,PHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','12589637',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PHONENUMBER (IDPHONENUMBER,PHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','26489571',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PHONENUMBER (IDPHONENUMBER,PHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','34698052',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PHONENUMBER (IDPHONENUMBER,PHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','12589637',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PHONENUMBER (IDPHONENUMBER,PHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','26489571',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.PHONENUMBER (IDPHONENUMBER,PHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','34698052',null,null,null,null);
-- INSERTING into KT.PHOTO
/* SET DEFINE OFF; */
-- INSERTING into KT.RESERVATION
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','10','1','1',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('20','27','1','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10','10','1','1',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('17','10','1','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('18','10','1','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','7','1',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','10','1','1',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('16','10','1','1',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('21','10','1','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('22','10','1','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','10','1','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','10','1','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATION (IDRESERVATION,IDUSER,IDPAYMENT,IDPENALTY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','10','2',null,null,null,null,null);
-- INSERTING into KT.RESERVATIONXROOM
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('15','55000',str_to_date('02/05/23','%d/%m/%y'),str_to_date('04/05/23','%d/%m/%y'),'20','3','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('12','25000',str_to_date('12/05/23','%d/%m/%y'),str_to_date('11/05/23','%d/%m/%y'),'17','7','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('13','100000',str_to_date('11/05/23','%d/%m/%y'),str_to_date('03/05/23','%d/%m/%y'),'18','8','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('11','55000',str_to_date('26/05/23','%d/%m/%y'),str_to_date('11/05/23','%d/%m/%y'),'16','3','1',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('16','100000',str_to_date('03/05/23','%d/%m/%y'),str_to_date('05/05/23','%d/%m/%y'),'21','8','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('17','80000',str_to_date('07/05/23','%d/%m/%y'),str_to_date('03/05/23','%d/%m/%y'),'22','9','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.RESERVATIONXROOM (IDRESERVATIONXROOM,ADMINPRICE,CHECKIN,CHECKOUT,IDRESERVATION,IDROOM,IDDISCOUNT,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','55000',str_to_date('05/03/23','%d/%m/%y'),str_to_date('10/05/23','%d/%m/%y'),'3','3','1',null,null,null,null);
-- INSERTING into KT.REVIEW
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','3','18',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('0','4','17',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','5','3',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','4','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','3','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','4','4',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','4','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','3','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','4','5',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','4','6',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.REVIEW (IDREVIEW,STAR,IDRESERVATION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10','2','6',null,null,null,null);
-- INSERTING into KT.ROOM
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','Piña','4','100000','16','3',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','Cazadora','4','80000','13','2',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10','Velero','4','48000','13','2',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','Arenal','2','55000','9','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('4','Chollin','2','75000','13','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','Caoba','3','40000','7','1',str_to_date('18/05/23','%d/%m/%y'),'KT',str_to_date('18/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','AXD','1','25000','13','1',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOM (IDROOM,NAME,CAPACITY,RECOMMENDEDPRICE,IDHOTEL,IDROOMCATEGORY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('11','Libelula','4','54000','13','2',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- INSERTING into KT.ROOMCATEGORY
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOMCATEGORY (IDROOMCATEGORY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','Estandar',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOMCATEGORY (IDROOMCATEGORY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','Superior',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.ROOMCATEGORY (IDROOMCATEGORY,NAME,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','Deluxe',null,null,null,null);
-- INSERTING into KT.STATE
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.STATE (IDSTATE,NAME,IDCOUNTRY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('5','San Jose','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.STATE (IDSTATE,NAME,IDCOUNTRY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','Alajuela','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.STATE (IDSTATE,NAME,IDCOUNTRY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','Cartago','1',null,null,null,null);
-- INSERTING into KT.USERS
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('22','jujuju','12345','Maria','Alejandra','moya','rojas','hola','1234',str_to_date('13/05/23','%d/%m/%y'),'4','7','3','1','9',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('24',null,'986545565','Amanda','Sofia','Rojas','Leiva','Amanda','rojas1234',str_to_date('19/05/23','%d/%m/%y'),'4','7','3','1','9',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('25',null,'986545565','Amanda','Sofia','Rojas','Leiva','Amanda','rojas1234',str_to_date('19/05/23','%d/%m/%y'),'4','7','3','1','9',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7',null,'1-1234-5678','Carlos','Andr¿s','Santana','Mata','cartana01','mata1234',str_to_date('11/05/95','%d/%m/%y'),'5','6','3','3',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8',null,'1-1825-0665','Luis','Alejandro','Barreda','Acevedo','luisale06','luisale',str_to_date('10/06/01','%d/%m/%y'),'4','7','4','1',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9',null,'1-1825-0665','Luis','Alejandro','Barreda','Acevedo','luisale06','luisale',str_to_date('10/06/01','%d/%m/%y'),'4','7','4','1',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10',null,'3-4567-0231','Katerine','Marcela','Guzman','Flores','kat02','kat',str_to_date('29/11/97','%d/%m/%y'),'6','6','3','2',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('12',null,'3-6548-1203','Emilia',null,'Carrero','Bermudez','emi190','emil90',str_to_date('10/05/02','%d/%m/%y'),'5','6','3','3',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('14',null,'2-5431-8279','Andrea','Maria','Mora','Castro','andre','Mora14',str_to_date('15/07/05','%d/%m/%y'),'4','7','3','3',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('15',null,'1-1234-5678','Carlos','Andres','Santana','Mata','cartana01','mata1234',str_to_date('11/05/95','%d/%m/%y'),'5','6','3','3',null,null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('23','jujuju','12345','Pepe','Alfonso','Aguilar','Fonseca','bobo','1234',str_to_date('13/05/23','%d/%m/%y'),'4','7','3','1','9',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('26',null,'305060241','Lucia','Brenda','Rojas','Torres','torres','torres',str_to_date('19/05/23','%d/%m/%y'),'4','7','3','1','9',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERS (IDUSER,PHOTO,IDENTIFICATIONCARD,FIRSTNAME,MIDDLENAME,LASTNAME,SECONDSURNAME,USERNAME,PASSWORD,BIRTHDATE,IDDISTRICT,IDTYPE,IDGENDER,IDUSERTYPE,IDHOTELADMIN,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('27',null,'305060241','Lucia','Brenda','Rojas','Torres','torres','torres',str_to_date('19/05/23','%d/%m/%y'),'4','7','3','1','9',str_to_date('19/05/23','%d/%m/%y'),'KT',str_to_date('19/05/23','%d/%m/%y'),'KT');
-- INSERTING into KT.USERTYPE
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERTYPE (IDUSERTYPE,DESCRIPTION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('1','Master',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERTYPE (IDUSERTYPE,DESCRIPTION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('2','Administrador',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERTYPE (IDUSERTYPE,DESCRIPTION,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('3','Cliente',null,null,null,null);
-- INSERTING into KT.USERXNATIONALITY
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('6','7','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('7','8','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','9','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','10','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('11','7','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('12','8','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('13','9','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('14','10','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('16','7','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('17','8','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('18','9','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('19','10','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('21','8','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('22','9','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('23','10','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXNATIONALITY (IDUSERXNATIONALITY,IDUSER,IDNATIONALITY,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('24','12','1',null,null,null,null);
-- INSERTING into KT.USERXPHONENUMBER
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXPHONENUMBER (IDUSERXPHONENUMBER,IDUSER,IDPHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('8','7','1',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXPHONENUMBER (IDUSERXPHONENUMBER,IDUSER,IDPHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('9','8','2',null,null,null,null);
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.USERXPHONENUMBER (IDUSERXPHONENUMBER,IDUSER,IDPHONENUMBER,CREATIONDATE,CREATIONUSER,MODDATE,MODUSER) values ('10','9','3',null,null,null,null);
-- INSERTING into KT.AMENITYXROOMVIEW
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOMVIEW (IDAMENITY,IDROOM,NAME) values ('5','3','Balcony');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOMVIEW (IDAMENITY,IDROOM,NAME) values ('5','3','Balcony');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOMVIEW (IDAMENITY,IDROOM,NAME) values ('6','4','Bathtub');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.AMENITYXROOMVIEW (IDAMENITY,IDROOM,NAME) values ('10','3','Seaview');
-- INSERTING into KT.VIEWALLUSERSINFO
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('22','hola','1234','Maria','Sabanilla','Cedula Juridica','Masculino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('24','Amanda','rojas1234','Amanda','Sabanilla','Cedula Juridica','Masculino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('25','Amanda','rojas1234','Amanda','Sabanilla','Cedula Juridica','Masculino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('26','torres','torres','Lucia','Sabanilla','Cedula Juridica','Masculino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('8','luisale06','luisale','Luis','Sabanilla','Cedula Juridica','Femenino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('9','luisale06','luisale','Luis','Sabanilla','Cedula Juridica','Femenino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('27','torres','torres','Lucia','Sabanilla','Cedula Juridica','Masculino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('23','bobo','1234','Pepe','Sabanilla','Cedula Juridica','Masculino','1','Master');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('10','kat02','kat','Katerine','Orosi','Cedula Fisica','Masculino','2','Administrador');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('15','cartana01','mata1234','Carlos','Fortuna','Cedula Fisica','Masculino','3','Cliente');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('12','emi190','emil90','Emilia','Fortuna','Cedula Fisica','Masculino','3','Cliente');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('7','cartana01','mata1234','Carlos','Fortuna','Cedula Fisica','Masculino','3','Cliente');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWALLUSERSINFO (IDUSER,USERNAME,PASSWORD,FIRSTNAME,NAME,IDTYPE,GENDER,IDUSERTYPE,IDUSERTYPEDESC) values ('14','andre','Mora14','Andrea','Sabanilla','Cedula Juridica','Masculino','3','Cliente');
-- INSERTING into KT.VIEWHOTELINFO
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('16','Guanabana','2','6','10','Orosi','Para¿so','Cartago','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('15','Kat Hotel','2','6','10','Orosi','Para¿so','Cartago','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('19','Luz','2','6','10','Orosi','Para¿so','Cartago','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('9','Arenal Secret Garden','1','6','15','Orosi','Para¿so','Cartago','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('17','Hello','2','6','10','Orosi','Para¿so','Cartago','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('7','Kibi Kibi','1','5','15','Fortuna','San Carlos','Alajuela','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('8','Kibi Kibi','1','5','15','Fortuna','San Carlos','Alajuela','Costa Rica');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWHOTELINFO (IDHOTEL,NAME,IDDISCOUNT,IDDISTRICT,DISCOUNT,DISTRICT,CANTON,STATE,COUNTRY) values ('13','Casa Bartzis','1','4','15','Sabanilla','Montes de Oca','San Jose','Costa Rica');
-- INSERTING into KT.VIEWRESERVATION
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('7','3','55000','Carlos','Arenal','3','2','Visa','Estandar','9','Arenal Secret Garden');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('10','17','25000','Katerine','AXD','7','1','Visa','Estandar','13','Casa Bartzis');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('10','18','100000','Katerine','Piña','8','4','Visa','Deluxe','16','Guanabana');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('10','16','55000','Katerine','Arenal','3','2','Visa','Estandar','9','Arenal Secret Garden');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('10','21','100000','Katerine','Piña','8','4','Visa','Deluxe','16','Guanabana');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('10','22','80000','Katerine','Cazadora','9','4','Visa','Superior','13','Casa Bartzis');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWRESERVATION (IDUSER,IDRESERVATION,ADMINPRICE,FIRSTNAME,ROOM,IDROOM,CAPACITY,NAMEPAYMENTMETHOD,ROOMCATEGORY,IDHOTEL,HOTELNAME) values ('27','20','55000','Lucia','Arenal','3','2','Visa','Estandar','9','Arenal Secret Garden');
-- INSERTING into KT.VIEWREVIEWSHOTEL
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWREVIEWSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CHECKIN,CHECKOUT,IDRESERVATION,FIRSTNAME,LASTNAME,STAR) values ('Guanabana','16','Piña',str_to_date('11/05/23','%d/%m/%y'),str_to_date('03/05/23','%d/%m/%y'),'18','Katerine','Guzman','3');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWREVIEWSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CHECKIN,CHECKOUT,IDRESERVATION,FIRSTNAME,LASTNAME,STAR) values ('Arenal Secret Garden','9','Arenal',str_to_date('05/03/23','%d/%m/%y'),str_to_date('10/05/23','%d/%m/%y'),'3','Carlos','Santana','5');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWREVIEWSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CHECKIN,CHECKOUT,IDRESERVATION,FIRSTNAME,LASTNAME,STAR) values ('Casa Bartzis','13','AXD',str_to_date('12/05/23','%d/%m/%y'),str_to_date('11/05/23','%d/%m/%y'),'17','Katerine','Guzman','4');
-- INSERTING into KT.VIEWROOMSHOTEL
/* SET DEFINE OFF; */
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Kibi Kibi','7','Caoba','3','40000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Arenal Secret Garden','9','Arenal','2','55000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Casa Bartzis','13','Velero','4','48000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Casa Bartzis','13','Libelula','4','54000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Casa Bartzis','13','Chollin','2','75000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Casa Bartzis','13','AXD','1','25000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Casa Bartzis','13','Cazadora','4','80000');
-- SQLINES LICENSE FOR EVALUATION USE ONLY
Insert into KT.VIEWROOMSHOTEL (HOTELNAME,IDHOTEL,ROOMNAME,CAPACITY,RECOMMENDEDPRICE) values ('Guanabana','16','Piña','4','100000');
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** DEUNIQUE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `CODEUNIQUE` ON `KT`.`DISCOUNT` (`CODE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _AMENITY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_AMENITY_ID` ON `KT`.`AMENITY` (`IDAMENITY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _AMENITYXROOM_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_AMENITYXROOM_ID` ON `KT`.`AMENITYXROOM` (`IDAMENITYXROOM`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _CANTON_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_CANTON_ID` ON `KT`.`CANTON` (`IDCANTON`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _COUNTRY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_COUNTRY_ID` ON `KT`.`COUNTRY` (`IDCOUNTRY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _DISCOUNT_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_DISCOUNT_ID` ON `KT`.`DISCOUNT` (`IDDISCOUNT`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _DISCTRICT_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_DISCTRICT_ID` ON `KT`.`DISTRICT` (`IDDISTRICT`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _EMAIL_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_EMAIL_ID` ON `KT`.`EMAIL` (`IDEMAIL`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _FAVORITE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_FAVORITE_ID` ON `KT`.`FAVORITE` (`IDFAVORITE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _FEEDBACK_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_FEEDBACK_ID` ON `KT`.`FEEDBACK` (`IDFEEDBACK`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _GENDER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_GENDER_ID` ON `KT`.`GENDER` (`IDGENDER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _HOTELCLASIFICATION_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_HOTELCLASIFICATION_ID` ON `KT`.`HOTELCLASIFICATION` (`IDHOTELCLASIFICATION`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _HOTEL_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_HOTEL_ID` ON `KT`.`HOTEL` (`IDHOTEL`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _IDTYPE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_IDTYPE_ID` ON `KT`.`IDTYPE` (`IDIDTYPE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _NATIONALITY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_NATIONALITY_ID` ON `KT`.`NATIONALITY` (`IDNATIONALITY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PARAMETER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PARAMETER_ID` ON `KT`.`PARAMETER` (`IDPARAMETER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PAYMENTMETHOD_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PAYMENTMETHOD_ID` ON `KT`.`PAYMENTMETHOD` (`IDPAYMENTMETHOD`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PAYMENTMETHODXHOTEL_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PAYMENTMETHODXHOTEL_ID` ON `KT`.`PAYMENTMETHODXHOTEL` (`IDPAYMENTMETHODXHOTEL`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PENALTY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PENALTY_ID` ON `KT`.`PENALTY` (`IDPENALTY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PHONENUMBER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PHONENUMBER_ID` ON `KT`.`PHONENUMBER` (`IDPHONENUMBER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PHOTO_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PHOTO_ID` ON `KT`.`PHOTO` (`IDPHOTO`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _RESERVATION_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_RESERVATION_ID` ON `KT`.`RESERVATION` (`IDRESERVATION`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _RESERVATIONXROOM_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_RESERVATIONXROOM_ID` ON `KT`.`RESERVATIONXROOM` (`IDRESERVATIONXROOM`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _REVIEW_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_REVIEW_ID` ON `KT`.`REVIEW` (`IDREVIEW`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _ROOMCATEGORY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_ROOMCATEGORY_ID` ON `KT`.`ROOMCATEGORY` (`IDROOMCATEGORY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _ROOM_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_ROOM_ID` ON `KT`.`ROOM` (`IDROOM`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _STATE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_STATE_ID` ON `KT`.`STATE` (`IDSTATE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USER_ID` ON `KT`.`USERS` (`IDUSER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USERTYPE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USERTYPE_ID` ON `KT`.`USERTYPE` (`IDUSERTYPE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USERXNATIONALITY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USERXNATIONALITY_ID` ON `KT`.`USERXNATIONALITY` (`IDUSERXNATIONALITY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USERXPHONENUMBER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USERXPHONENUMBER_ID` ON `KT`.`USERXPHONENUMBER` (`IDUSERXPHONENUMBER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _AMENITY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_AMENITY_ID` ON `KT`.`AMENITY` (`IDAMENITY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _AMENITYXROOM_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_AMENITYXROOM_ID` ON `KT`.`AMENITYXROOM` (`IDAMENITYXROOM`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _CANTON_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_CANTON_ID` ON `KT`.`CANTON` (`IDCANTON`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _COUNTRY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_COUNTRY_ID` ON `KT`.`COUNTRY` (`IDCOUNTRY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** DEUNIQUE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `CODEUNIQUE` ON `KT`.`DISCOUNT` (`CODE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _DISCOUNT_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_DISCOUNT_ID` ON `KT`.`DISCOUNT` (`IDDISCOUNT`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _DISCTRICT_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_DISCTRICT_ID` ON `KT`.`DISTRICT` (`IDDISTRICT`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _EMAIL_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_EMAIL_ID` ON `KT`.`EMAIL` (`IDEMAIL`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _FAVORITE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_FAVORITE_ID` ON `KT`.`FAVORITE` (`IDFAVORITE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _FEEDBACK_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_FEEDBACK_ID` ON `KT`.`FEEDBACK` (`IDFEEDBACK`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _GENDER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_GENDER_ID` ON `KT`.`GENDER` (`IDGENDER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _HOTEL_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_HOTEL_ID` ON `KT`.`HOTEL` (`IDHOTEL`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _HOTELCLASIFICATION_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_HOTELCLASIFICATION_ID` ON `KT`.`HOTELCLASIFICATION` (`IDHOTELCLASIFICATION`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _IDTYPE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_IDTYPE_ID` ON `KT`.`IDTYPE` (`IDIDTYPE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _NATIONALITY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_NATIONALITY_ID` ON `KT`.`NATIONALITY` (`IDNATIONALITY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PARAMETER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PARAMETER_ID` ON `KT`.`PARAMETER` (`IDPARAMETER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PAYMENTMETHOD_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PAYMENTMETHOD_ID` ON `KT`.`PAYMENTMETHOD` (`IDPAYMENTMETHOD`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PAYMENTMETHODXHOTEL_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PAYMENTMETHODXHOTEL_ID` ON `KT`.`PAYMENTMETHODXHOTEL` (`IDPAYMENTMETHODXHOTEL`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PENALTY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PENALTY_ID` ON `KT`.`PENALTY` (`IDPENALTY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PHONENUMBER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PHONENUMBER_ID` ON `KT`.`PHONENUMBER` (`IDPHONENUMBER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _PHOTO_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_PHOTO_ID` ON `KT`.`PHOTO` (`IDPHOTO`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _RESERVATION_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_RESERVATION_ID` ON `KT`.`RESERVATION` (`IDRESERVATION`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _RESERVATIONXROOM_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_RESERVATIONXROOM_ID` ON `KT`.`RESERVATIONXROOM` (`IDRESERVATIONXROOM`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _REVIEW_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_REVIEW_ID` ON `KT`.`REVIEW` (`IDREVIEW`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _ROOM_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_ROOM_ID` ON `KT`.`ROOM` (`IDROOM`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _ROOMCATEGORY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_ROOMCATEGORY_ID` ON `KT`.`ROOMCATEGORY` (`IDROOMCATEGORY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _STATE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_STATE_ID` ON `KT`.`STATE` (`IDSTATE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USER_ID` ON `KT`.`USERS` (`IDUSER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USERTYPE_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USERTYPE_ID` ON `KT`.`USERTYPE` (`IDUSERTYPE`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USERXNATIONALITY_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USERXNATIONALITY_ID` ON `KT`.`USERXNATIONALITY` (`IDUSERXNATIONALITY`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** _USERXPHONENUMBER_ID
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  CREATE UNIQUE INDEX `PK_USERXPHONENUMBER_ID` ON `KT`.`USERXPHONENUMBER` (`IDUSERXPHONENUMBER`) 
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTAMENITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTAMENITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTAMENITY` 
BEFORE INSERT
ON Amenity
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;

//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTAMENITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTAMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTAMENITYXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTAMENITYXROOM` 
BEFORE INSERT
ON AmenityxRoom
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTAMENITYXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTCANTON
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTCANTON`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTCANTON` 
BEFORE INSERT
ON Canton
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTCANTON` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTCOUNTRY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTCOUNTRY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTCOUNTRY` 
BEFORE INSERT
ON Country
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTCOUNTRY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTDISCOUNT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTDISCOUNT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTDISCOUNT` 
BEFORE INSERT
ON Discount
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTDISCOUNT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTDISTRICT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTDISTRICT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTDISTRICT` 
BEFORE INSERT
ON District
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTDISTRICT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTEMAIL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTEMAIL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTEMAIL` 
BEFORE INSERT
ON Email
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTEMAIL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTFAVORITE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTFAVORITE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTFAVORITE` 
BEFORE INSERT
ON Favorite
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTFAVORITE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTFEEDBACK
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTFEEDBACK`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTFEEDBACK` 
BEFORE INSERT
ON Feedback
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTFEEDBACK` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTGENDER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTGENDER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTGENDER` 
BEFORE INSERT
ON Gender
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTGENDER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTHOTEL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTHOTEL` 
BEFORE INSERT
ON Hotel
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUsers = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUsers = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTHOTEL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTIDTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTIDTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTIDTYPE` 
BEFORE INSERT
ON IdType
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTIDTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTNATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTNATIONALITY` 
BEFORE INSERT
ON Nationality
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTNATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPARAMETER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPARAMETER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPARAMETER` 
BEFORE INSERT
ON Parameter
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPARAMETER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPAYMENTMETHOD`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPAYMENTMETHOD` 
BEFORE INSERT
ON PaymentMethod
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPAYMENTMETHOD` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPAYXHOT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPAYXHOT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPAYXHOT` 
BEFORE INSERT
ON PaymentMethodXHotel
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPAYXHOT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPHONENUMBER` 
BEFORE INSERT
ON PhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPHOTO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPHOTO`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPHOTO` 
BEFORE INSERT
ON Photo
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPHOTO` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTRESERVATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTRESERVATION`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTRESERVATION` 
BEFORE INSERT
ON Reservation
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTRESERVATION` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTRESXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTRESXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTRESXROOM` 
BEFORE INSERT
ON ReservationXRoom
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTRESXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTREVIEW
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTREVIEW`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTREVIEW` 
BEFORE INSERT
ON Review
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTREVIEW` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTROOM` 
BEFORE INSERT
ON Room
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTROOMCATEGORY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTROOMCATEGORY` 
BEFORE INSERT
ON RoomCategory
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTROOMCATEGORY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTSTATE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTSTATE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTSTATE` 
BEFORE INSERT
ON State
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTSTATE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERS
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERS`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERS` 
BEFORE INSERT
ON Users
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERS` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERTYPE` 
BEFORE INSERT
ON UserType
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERXNATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERXNATIONALITY` 
BEFORE INSERT
ON UserxNationality
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERXNATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERXPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERXPHONENUMBER` 
BEFORE INSERT
ON UserXPhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERXPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEAMENITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEAMENITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEAMENITY` 
BEFORE UPDATE
ON Amenity
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEAMENITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEAMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEAMENITYXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEAMENITYXROOM` 
BEFORE UPDATE
ON AmenityxRoom
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEAMENITYXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATECANTON
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATECANTON`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATECANTON` 
BEFORE UPDATE
ON Canton
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATECANTON` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATECOUNTRY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATECOUNTRY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATECOUNTRY` 
BEFORE UPDATE
ON Country
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATECOUNTRY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEDISCOUNT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEDISCOUNT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEDISCOUNT` 
BEFORE UPDATE
ON Discount
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEDISCOUNT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEDISTRICT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEDISTRICT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEDISTRICT` 
BEFORE UPDATE
ON District
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEDISTRICT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEEMAIL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEEMAIL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEEMAIL` 
BEFORE UPDATE
ON Email
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEEMAIL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEFAVORITE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEFAVORITE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEFAVORITE` 
BEFORE UPDATE
ON Favorite
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEFAVORITE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEFEEDBACK
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEFEEDBACK`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEFEEDBACK` 
BEFORE UPDATE
ON Feedback
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEFEEDBACK` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEGENDER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEGENDER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEGENDER` 
BEFORE UPDATE
ON Gender
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEGENDER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEHOTEL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEHOTEL` 
BEFORE UPDATE
ON Hotel
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUsers = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEHOTEL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEIDTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEIDTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEIDTYPE` 
BEFORE UPDATE
ON IdType
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEIDTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATENATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATENATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATENATIONALITY` 
BEFORE UPDATE
ON Nationality
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATENATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPARAMETER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPARAMETER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPARAMETER` 
BEFORE UPDATE
ON Parameter
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPARAMETER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPAYMENTMETHOD`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPAYMENTMETHOD` 
BEFORE UPDATE
ON PaymentMethod
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPAYMENTMETHOD` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPAYXHOT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPAYXHOT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPAYXHOT` 
BEFORE UPDATE
ON PaymentMethodXHotel
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPAYXHOT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPHONENUMBER` 
BEFORE UPDATE
ON PhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPHOTO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPHOTO`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPHOTO` 
BEFORE UPDATE
ON Photo
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPHOTO` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATERESERVATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATERESERVATION`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATERESERVATION` 
BEFORE UPDATE
ON Reservation
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATERESERVATION` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATERESXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATERESXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATERESXROOM` 
BEFORE UPDATE
ON ReservationXRoom
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATERESXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEREVIEW
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEREVIEW`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEREVIEW` 
BEFORE UPDATE
ON Review
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEREVIEW` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEROOM` 
BEFORE UPDATE
ON Room
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEROOMCATEGORY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEROOMCATEGORY` 
BEFORE UPDATE
ON RoomCategory
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEROOMCATEGORY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATESTATE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATESTATE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATESTATE` 
BEFORE UPDATE
ON State
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATESTATE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERS
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERS`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERS` 
BEFORE UPDATE
ON Users
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERS` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERTYPE` 
BEFORE UPDATE
ON UserType
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERXNATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERXNATIONALITY` 
BEFORE UPDATE
ON UserxNationality
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERXNATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERXPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERXPHONENUMBER` 
BEFORE UPDATE
ON UserXPhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERXPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTAMENITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTAMENITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTAMENITY` 
BEFORE INSERT
ON Amenity
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;

//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTAMENITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEAMENITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEAMENITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEAMENITY` 
BEFORE UPDATE
ON Amenity
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEAMENITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTAMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTAMENITYXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTAMENITYXROOM` 
BEFORE INSERT
ON AmenityxRoom
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTAMENITYXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEAMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEAMENITYXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEAMENITYXROOM` 
BEFORE UPDATE
ON AmenityxRoom
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEAMENITYXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTCANTON
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTCANTON`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTCANTON` 
BEFORE INSERT
ON Canton
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTCANTON` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATECANTON
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATECANTON`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATECANTON` 
BEFORE UPDATE
ON Canton
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATECANTON` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTCOUNTRY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTCOUNTRY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTCOUNTRY` 
BEFORE INSERT
ON Country
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTCOUNTRY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATECOUNTRY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATECOUNTRY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATECOUNTRY` 
BEFORE UPDATE
ON Country
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATECOUNTRY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTDISCOUNT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTDISCOUNT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTDISCOUNT` 
BEFORE INSERT
ON Discount
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTDISCOUNT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEDISCOUNT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEDISCOUNT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEDISCOUNT` 
BEFORE UPDATE
ON Discount
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEDISCOUNT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTDISTRICT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTDISTRICT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTDISTRICT` 
BEFORE INSERT
ON District
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTDISTRICT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEDISTRICT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEDISTRICT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEDISTRICT` 
BEFORE UPDATE
ON District
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEDISTRICT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTEMAIL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTEMAIL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTEMAIL` 
BEFORE INSERT
ON Email
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTEMAIL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEEMAIL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEEMAIL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEEMAIL` 
BEFORE UPDATE
ON Email
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEEMAIL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTFAVORITE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTFAVORITE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTFAVORITE` 
BEFORE INSERT
ON Favorite
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTFAVORITE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEFAVORITE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEFAVORITE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEFAVORITE` 
BEFORE UPDATE
ON Favorite
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEFAVORITE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTFEEDBACK
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTFEEDBACK`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTFEEDBACK` 
BEFORE INSERT
ON Feedback
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTFEEDBACK` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEFEEDBACK
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEFEEDBACK`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEFEEDBACK` 
BEFORE UPDATE
ON Feedback
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEFEEDBACK` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTGENDER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTGENDER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTGENDER` 
BEFORE INSERT
ON Gender
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTGENDER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEGENDER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEGENDER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEGENDER` 
BEFORE UPDATE
ON Gender
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEGENDER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTHOTEL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTHOTEL` 
BEFORE INSERT
ON Hotel
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUsers = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUsers = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTHOTEL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEHOTEL
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEHOTEL`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEHOTEL` 
BEFORE UPDATE
ON Hotel
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUsers = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEHOTEL` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTIDTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTIDTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTIDTYPE` 
BEFORE INSERT
ON IdType
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTIDTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEIDTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEIDTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEIDTYPE` 
BEFORE UPDATE
ON IdType
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEIDTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATENATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATENATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATENATIONALITY` 
BEFORE UPDATE
ON Nationality
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATENATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTNATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTNATIONALITY` 
BEFORE INSERT
ON Nationality
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTNATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPARAMETER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPARAMETER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPARAMETER` 
BEFORE UPDATE
ON Parameter
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPARAMETER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPARAMETER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPARAMETER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPARAMETER` 
BEFORE INSERT
ON Parameter
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPARAMETER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPAYMENTMETHOD`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPAYMENTMETHOD` 
BEFORE UPDATE
ON PaymentMethod
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPAYMENTMETHOD` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPAYMENTMETHOD`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPAYMENTMETHOD` 
BEFORE INSERT
ON PaymentMethod
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPAYMENTMETHOD` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPAYXHOT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPAYXHOT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPAYXHOT` 
BEFORE UPDATE
ON PaymentMethodXHotel
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPAYXHOT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPAYXHOT
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPAYXHOT`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPAYXHOT` 
BEFORE INSERT
ON PaymentMethodXHotel
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPAYXHOT` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPHONENUMBER` 
BEFORE UPDATE
ON PhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPHONENUMBER` 
BEFORE INSERT
ON PhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEPHOTO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEPHOTO`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEPHOTO` 
BEFORE UPDATE
ON Photo
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEPHOTO` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTPHOTO
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTPHOTO`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTPHOTO` 
BEFORE INSERT
ON Photo
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTPHOTO` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATERESERVATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATERESERVATION`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATERESERVATION` 
BEFORE UPDATE
ON Reservation
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATERESERVATION` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTRESERVATION
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTRESERVATION`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTRESERVATION` 
BEFORE INSERT
ON Reservation
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTRESERVATION` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATERESXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATERESXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATERESXROOM` 
BEFORE UPDATE
ON ReservationXRoom
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATERESXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTRESXROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTRESXROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTRESXROOM` 
BEFORE INSERT
ON ReservationXRoom
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTRESXROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEREVIEW
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEREVIEW`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEREVIEW` 
BEFORE UPDATE
ON Review
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEREVIEW` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTREVIEW
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTREVIEW`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTREVIEW` 
BEFORE INSERT
ON Review
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTREVIEW` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEROOM` 
BEFORE UPDATE
ON Room
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTROOM
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTROOM`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTROOM` 
BEFORE INSERT
ON Room
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTROOM` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEROOMCATEGORY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEROOMCATEGORY` 
BEFORE UPDATE
ON RoomCategory
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEROOMCATEGORY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTROOMCATEGORY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTROOMCATEGORY` 
BEFORE INSERT
ON RoomCategory
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTROOMCATEGORY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATESTATE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATESTATE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATESTATE` 
BEFORE UPDATE
ON State
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATESTATE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTSTATE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTSTATE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTSTATE` 
BEFORE INSERT
ON State
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTSTATE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERS
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERS`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERS` 
BEFORE UPDATE
ON Users
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERS` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERS
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERS`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERS` 
BEFORE INSERT
ON Users
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERS` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERTYPE` 
BEFORE UPDATE
ON UserType
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERTYPE
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERTYPE`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERTYPE` 
BEFORE INSERT
ON UserType
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERTYPE` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERXNATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERXNATIONALITY` 
BEFORE UPDATE
ON UserxNationality
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERXNATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERXNATIONALITY`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERXNATIONALITY` 
BEFORE INSERT
ON UserxNationality
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERXNATIONALITY` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREUPDATEUSERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREUPDATEUSERXPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREUPDATEUSERXPHONENUMBER` 
BEFORE UPDATE
ON UserXPhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREUPDATEUSERXPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** BEFOREINSERTUSERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP TRIGGER IF EXISTS `KT`.`BEFOREINSERTUSERXPHONENUMBER`;

  DELIMITER //

  CREATE TRIGGER `KT`.`BEFOREINSERTUSERXPHONENUMBER` 
BEFORE INSERT
ON UserXPhoneNumber
FOR EACH ROW
BEGIN
  SET NEW.creationDate = SYSDATE();
  SET NEW.creationUser = USER();
  SET NEW.modDate = SYSDATE();
  SET NEW.modUser = USER();  
END;


//

DELIMITER ;


/* ALTER TRIGGER `KT`.`BEFOREINSERTUSERXPHONENUMBER` ENABLE; */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_AMENITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_AMENITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_AMENITY` (IN p_idAmenity DOUBLE)
BEGIN
      DELETE FROM Amenity
      WHERE idamenity = p_idAmenity;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_AMENITYHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_AMENITYHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_AMENITYHOTEL` (IN p_idAmenity DOUBLE,IN p_idHotel DOUBLE)
BEGIN
      DELETE FROM Amenity
      WHERE idamenity = p_idAmenity and idhotel = p_idhotel;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_AMENITYXROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_AMENITYXROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_AMENITYXROOM` (IN p_idAmenityXRoom DOUBLE)
      BEGIN
      DELETE FROM AmenityXRoom
      WHERE idAmenityXRoom = p_idAmenityXRoom;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_CANTON
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_CANTON`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_CANTON` (
  IN p_idCanton DOUBLE)
  BEGIN
  DELETE FROM Canton
  WHERE idCanton = p_idCanton;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_COUNTRY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_COUNTRY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_COUNTRY` (
  IN p_idCountry DOUBLE)
    BEGIN
    DELETE FROM Country
    WHERE Idcountry = p_idCountry;
    COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_DISCOUNT
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_DISCOUNT`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_DISCOUNT` (
    IN p_idDiscount DOUBLE)
BEGIN
        DELETE FROM Discount
        WHERE  idDiscount = p_idDiscount;
        COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_DISTRICT
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_DISTRICT`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_DISTRICT` (
  IN p_idDistrict DOUBLE)
  BEGIN
  DELETE FROM District
  WHERE idDistrict = p_idDistrict;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_EMAIL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_EMAIL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_EMAIL` (
  IN p_idEmail DOUBLE)
  BEGIN
  DELETE FROM Email
  WHERE idEmail = p_idEmail;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_FAVORITE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_FAVORITE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_FAVORITE` (
  IN p_idFavorite DOUBLE)
  BEGIN
  DELETE FROM favorite
  WHERE idFavorite = p_idFavorite;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_FEEDBACK
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_FEEDBACK`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_FEEDBACK` (
  IN p_idFeedback DOUBLE)
  BEGIN
  DELETE FROM Feedback
  WHERE idFeedback = p_idFeedback;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_GENDER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_GENDER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_GENDER` (
  IN p_idGender DOUBLE)
  BEGIN
  DELETE FROM Gender
  WHERE idGender = p_idGender;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_HOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_HOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_HOTEL` (
  IN p_idHotel DOUBLE)
  BEGIN
  DELETE FROM Hotel
        WHERE idHotel = p_idHotel;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_HOTELCLASIFICATION
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_HOTELCLASIFICATION`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_HOTELCLASIFICATION` (
  IN p_idHotelClasification DOUBLE)
  BEGIN
  DELETE FROM HotelClasification
  WHERE idHotelClasification = p_idHotelClasification;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_IDTYPE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_IDTYPE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_IDTYPE` (
  IN p_idIDType DOUBLE,
  IN p_Mask VARCHAR(4000))
    BEGIN
    DELETE FROM IDType
    WHERE idIDType = p_idIDType;
    COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_NATIONALITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_NATIONALITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_NATIONALITY` (
      IN p_idNationality DOUBLE,
      IN p_name VARCHAR(4000))
  BEGIN
        DELETE FROM Nationality
        WHERE idNationality = p_idNationality;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_PAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_PAYMENTMETHOD`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_PAYMENTMETHOD` (
  IN p_idPaymentMethod DOUBLE)
  BEGIN
  DELETE FROM PaymentMethod
  WHERE idPaymentMethod = p_idPaymentMethod;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_PAYMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_PAYMENTMETHODXHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_PAYMENTMETHODXHOTEL` (IN p_idPaymentMethodXHotel DOUBLE)
      BEGIN
      DELETE FROM PaymentMethodXHotel
      WHERE idPaymentMethodXHotel = p_idPaymentMethodXHotel;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_PENALTY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_PENALTY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_PENALTY` (
  IN p_idPenalty DOUBLE)
  BEGIN
  DELETE FROM penalty
  WHERE idPenalty = p_idPenalty;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_PHONENUMBER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_PHONENUMBER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_PHONENUMBER` (IN p_idPhoneNumber DOUBLE)
BEGIN
      DELETE FROM PhoneNumber
      WHERE idPhoneNumber = p_idPhoneNumber;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_PHOTO
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_PHOTO`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_PHOTO` (
  IN p_idPhoto DOUBLE,
  IN p_picture VARCHAR(4000),
  IN p_idHotel DOUBLE)
  BEGIN
  DELETE FROM photo
  WHERE idPhoto = p_idPhoto;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_RESERVATION
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_RESERVATION`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_RESERVATION` (
  IN p_idReservation DOUBLE)
  BEGIN
  DELETE FROM reservationxroom
  WHERE idReservation = p_idReservation;
  COMMIT;

  DELETE FROM reservation
  WHERE idReservation = p_idReservation;
  COMMIT;

END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_RESERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_RESERVATIONXROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_RESERVATIONXROOM` (
  IN p_idReservationXRoom DOUBLE)
  BEGIN
  DELETE FROM ReservationXRoom
  WHERE idReservationXRoom = p_idReservationXRoom;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_REVIEW
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_REVIEW`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_REVIEW` (
  IN p_idReview DOUBLE)
  BEGIN
  DELETE FROM Review
  WHERE idReview = p_idReview;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_ROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_ROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_ROOM` (
    IN p_idRoom DOUBLE)
      BEGIN
      DELETE FROM Room
      WHERE idRoom = p_idRoom;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_ROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_ROOMCATEGORY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_ROOMCATEGORY` (
    IN p_idRoomCategory DOUBLE)
      BEGIN
      DELETE FROM RoomCategory
      WHERE idRoomCategory = p_idRoomCategory;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_STATE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_STATE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_STATE` (
  IN p_idState DOUBLE)
  BEGIN
  DELETE FROM State
  WHERE idState = p_idState;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_USER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_USER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_USER` (
  IN p_idUser DOUBLE)
  BEGIN
  DELETE FROM Users
  WHERE idUser = p_idUser;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_USERTYPE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_USERTYPE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_USERTYPE` (
  IN p_idUserType DOUBLE)
  BEGIN
  DELETE FROM userType
  WHERE idUserType = p_idUserType;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_USERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_USERXNATIONALITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_USERXNATIONALITY` (
  IN p_idUserxNationality DOUBLE)
  BEGIN
  DELETE FROM UserXNationality
      WHERE idUserxNationality = p_idUserxNationality;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e DELETE_USERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`DELETE_USERXPHONENUMBER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`DELETE_USERXPHONENUMBER` (
  IN p_idUserXPhoneNumber DOUBLE)
  BEGIN
  DELETE FROM UserXPhoneNumber
  WHERE idUserXPhoneNumber = p_idUserXPhoneNumber;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e EMP_BY_JOB
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`EMP_BY_JOB`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`EMP_BY_JOB` (
    k_username           VARCHAR(4000)
)
BEGIN
    OPEN p_emp_refcur FOR  
    SELECT username,
           password
    FROM Users WHERE  username = k_username;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e EMPTY_CATS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`EMPTY_CATS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`EMPTY_CATS` (IN k_username VARCHAR(4000)) 
BEGIN
    OPEN v_cursor FOR
    SELECT username,
           password
    FROM Users WHERE  username = k_username;   

END;   


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETAMENITIES
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETAMENITIES`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETAMENITIES` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM amenity;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETAMENITIESBYHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETAMENITIESBYHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETAMENITIESBYHOTEL` ( IN p_idHotel Double)
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM amenity
    where idHotel = p_idHotel;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETAMENITIESBYROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETAMENITIESBYROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETAMENITIESBYROOM` ( IN p_idRoom Double)
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM amenityxroomview
    where idRoom = p_idRoom;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETCANTONS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETCANTONS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETCANTONS` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM canton;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETCATEGORIES
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETCATEGORIES`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETCATEGORIES` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM roomcategory;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETCOUNTRIES
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETCOUNTRIES`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETCOUNTRIES` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM country;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETCOUNTRY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETCOUNTRY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETCOUNTRY`()
 BEGIN
    DECLARE vcName VARCHAR(35);
DECLARE NOT_FOUND INT DEFAULT 0;

    DECLARE CountryCursor CURSOR FOR
        SELECT Name
        FROM Country;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET NOT_FOUND = 1;

 
    OPEN CountryCursor;
    loop_label:
    LOOP
        FETCH CountryCursor INTO vcName;
        IF NOT_FOUND = 1 THEN LEAVE loop_label; END IF;
        PUT_LINE(vcName);
    END LOOP;
    CLOSE CountryCursor;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETDISTRICTS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETDISTRICTS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETDISTRICTS` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM district;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETHOTEL` (IN p_iddistrict DOUBLE)
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM hotel
    WHERE iddistrict = p_iddistrict;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETHOTELINFO
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETHOTELINFO`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETHOTELINFO` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM viewHotelInfo;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETHOTELS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETHOTELS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETHOTELS` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM viewhotelinfo;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETPAYMENTS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETPAYMENTS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETPAYMENTS` (
 )
BEGIN
  OPEN mycursor FOR SELECT * FROM paymentmethod;
END ;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETRESERVATIONSFROMUSER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETRESERVATIONSFROMUSER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETRESERVATIONSFROMUSER` (p_UserID DOUBLE)
BEGIN
    OPEN p_Users FOR
        SELECT *
        FROM viewReservation
        WHERE idUser = p_UserID;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETREVIEWSHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETREVIEWSHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETREVIEWSHOTEL` (IN p_idHotel VARCHAR(4000))
BEGIN
    OPEN revhotelcursor FOR
    SELECT *
    FROM viewreviewshotel
    WHERE idHotel = p_idHotel;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETROOMFROMHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETROOMFROMHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETROOMFROMHOTEL` ( IN p_idHotel Double)
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM room
    where idHotel = p_idHotel;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETROOMSHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETROOMSHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETROOMSHOTEL` (
    IN p_idHotel VARCHAR(4000)
)
BEGIN
    OPEN roomshotelcursor FOR
    SELECT *
    FROM viewRoomsHotel
    WHERE idHotel = p_idHotel;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETSTATES
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETSTATES`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETSTATES` ()
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM state;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETUSER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETUSER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETUSER` (
 )
BEGIN
  OPEN mycursor FOR SELECT * FROM users;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETUSERBYNAME
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETUSERBYNAME`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETUSERBYNAME` 
(p_username varchar(4000) /* Use -meta option users.username%type */)

begin
  declare v_firstname varchar(4000) /* Use -meta option users.firstname%type */;
  declare v_password varchar(4000) /* Use -meta option users.password%type */;
  declare p_recordset SYS_REFCURSOR;

 
declare exit handler for sqlexception begin
put_line(sqlcode);
put_line(sqlerrm);
end;

open p_recordset for
    select firstname,password
    from
    users
    where username=p_username;


end;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETUSERS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETUSERS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETUSERS` (p_UsersID DOUBLE /* := NULL */)

DECLARE NOT_FOUND INT DEFAULT 0;
BEGIN

DECLARE users_cursor CURSOR
FOR
    SELECT FirstName, LastName, IdentificationCard
    FROM Users;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET NOT_FOUND = 1;
DECLARE i_FirstName VARCHAR(200); -- Use -meta option to resolve the data type
DECLARE i_LastName VARCHAR(200); -- Use -meta option to resolve the data type
DECLARE i_IdentificationCard VARCHAR(200); -- Use -meta option to resolve the data type

 
    DECLARE i CURSOR FOR users_cursor OPEN i;
 FETCH i INTO;
 WHILE NOT_FOUND=0
 DO
        PUT_LINE(i_FirstName);
        PUT_LINE(i_LastName);
        PUT_LINE(i_IdentificationCard);
    FETCH users_cursor INTO;
    END WHILE;
    CLOSE users_cursor;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETUSERSBYUSERNAME
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETUSERSBYUSERNAME`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETUSERSBYUSERNAME` (p_Username VARCHAR(4000))
BEGIN
    OPEN p_Users FOR
        SELECT FirstName, LastName, IdentificationCard
        FROM Users
        WHERE Username = p_Username;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e GETUSERSCURS
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`GETUSERSCURS`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`GETUSERSCURS` (IN p_username VARCHAR(4000))
BEGIN
  OPEN usercursor FOR
    SELECT *
    FROM viewallusersinfo
    WHERE username = p_username;
 END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_AMENITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_AMENITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_AMENITY` (
    --  SQLINES DEMO *** BER,
    IN p_Name VARCHAR(4000),
    IN p_IdHotel DOUBLE)
BEGIN
        -- SQLINES LICENSE FOR EVALUATION USE ONLY
        INSERT INTO Amenity (idAmenity, name, idHotel)
        VALUES (nextval('s_amenity'), p_Name, p_IdHotel);
        COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_AMENITYXROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_AMENITYXROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_AMENITYXROOM` (
    IN p_idAmenityXRoom DOUBLE,
    IN p_idAmenity DOUBLE,
    IN p_idRoom DOUBLE)
BEGIN

      -- SQLINES LICENSE FOR EVALUATION USE ONLY
      INSERT INTO AmenityXRoom (idAmenityXRoom, idAmenity, idRoom)
      VALUES (NextVal('s_AmenityXRoom'), p_idAmenity, p_idRoom);
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_CANTON
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_CANTON`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_CANTON` (
  IN p_idCanton DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_idState DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Canton(idCanton, Name, idState)
  VALUES(nextval('s_canton'), p_Name, p_idState);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_COUNTRY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_COUNTRY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_COUNTRY` (
  IN p_idCountry DOUBLE,
  IN p_Name VARCHAR(4000))
BEGIN
    -- SQLINES LICENSE FOR EVALUATION USE ONLY
    INSERT INTO Country(Idcountry, Name)
    VALUES(nextval('s_country'), p_name);
    COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_DISCOUNT
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_DISCOUNT`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_DISCOUNT` (
    IN p_idDiscount DOUBLE,
    IN p_ExpireDate DATETIME,
    IN p_Code VARCHAR(4000),
    IN p_Percentage DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Discount (idDiscount, ExpireDate, Code, Percentage)
  VALUES (nextval('s_discount'), p_ExpireDate, p_Code, p_Percentage);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_DISTRICT
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_DISTRICT`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_DISTRICT` (
  IN p_idDistrict DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_idCanton DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO District(idDistrict, Name, idCanton)
  VALUES(nextval('s_district'), p_Name, p_idCanton);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_EMAIL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_EMAIL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_EMAIL` (
  IN p_idEmail DOUBLE,
  IN p_ElectronicMail VARCHAR(4000),
  IN p_idUser DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Email(idEmail, ElectronicMail, idUser)
  VALUES(nextval('s_email'), p_ElectronicMail, p_idUser);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_FAVORITE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_FAVORITE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_FAVORITE` (
  IN p_idFavorite DOUBLE,
  IN p_idUser DOUBLE,
  IN p_idHotel DOUBLE)
  BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Favorite(idFavorite, idUser, idHotel) 
  VALUES (nextval('s_favorite'), p_idUser, p_idHotel);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_FEEDBACK
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_FEEDBACK`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_FEEDBACK` (
  IN p_idFeedback DOUBLE,
  IN p_comment VARCHAR(4000),
  IN p_idReservation DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Feedback(idFeedback , commment, idReservation) 
  VALUES (nextval('s_feedback'), p_comment, p_idReservation);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_GENDER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_GENDER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_GENDER` (
  IN p_idGender DOUBLE,
  IN p_TypeGender VARCHAR(4000))
BEGIN
      -- SQLINES LICENSE FOR EVALUATION USE ONLY
      INSERT INTO Gender(idGender, Type)
      VALUES (nextval('s_gender'), p_TypeGender);
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_HOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_HOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_HOTEL` (
  IN p_Name VARCHAR(4000),
  IN p_RegisterDate DATETIME,
  IN p_idDistrict DOUBLE,
  IN p_idDiscount DOUBLE)
  BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Hotel(idHotel, Name, RegisterDate, idDistrict, idClasification, idDiscount)
  VALUES (nextval('s_hotel'), p_Name, p_RegisterDate, p_idDistrict, 1, p_idDiscount);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_HOTELCLASIFICATION
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_HOTELCLASIFICATION`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_HOTELCLASIFICATION` (
  IN p_idHotelClasification DOUBLE,
  IN p_Name VARCHAR(4000))
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO HotelClasification(idHotelClasification, Name)
  VALUES (NextVal('s_HotelClasification'), p_Name);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_IDTYPE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_IDTYPE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_IDTYPE` (
  IN p_idIDType DOUBLE,
  IN p_Mask VARCHAR(4000),
  IN p_Name VARCHAR(4000))
BEGIN
    -- SQLINES LICENSE FOR EVALUATION USE ONLY
    INSERT INTO IDType(idIDType, Mask, name)
    VALUES(NextVal('s_IDType'), p_Mask, p_Name);
    COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_NATIONALITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_NATIONALITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_NATIONALITY` (
      IN p_idNationality DOUBLE,
      IN p_name VARCHAR(4000))
BEGIN
        -- SQLINES LICENSE FOR EVALUATION USE ONLY
        INSERT INTO Nationality (idNationality, name)
        VALUES (nextval('s_nationality'), p_name);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_PARAMETER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_PARAMETER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_PARAMETER` (
  IN p_idParameter DOUBLE,
  IN p_name VARCHAR(4000),
  IN p_value DOUBLE)
  BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Parameter(idParameter, name, value) 
  VALUES (nextval('s_parameter'), p_name, p_value);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_PAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_PAYMENTMETHOD`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_PAYMENTMETHOD` (
  IN p_idPaymentMethod DOUBLE,
  IN p_namePaymentMethod VARCHAR(4000))
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO PaymentMethod(idPaymentMethod , namePaymentMethod)
  VALUES (NextVal('s_paymentMethod'), p_namePaymentMethod);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_PAYMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_PAYMENTMETHODXHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_PAYMENTMETHODXHOTEL` (
    IN p_idPaymentMethodXHotel DOUBLE,
    IN p_idPaymentMethod DOUBLE,
    IN p_idHotel DOUBLE)
BEGIN

      -- SQLINES LICENSE FOR EVALUATION USE ONLY
      INSERT INTO PaymentMethodXHotel (idPaymentMethodXHotel, idPaymentMethod, idHotel)
      VALUES (NextVal('s_PaymentMethodXHotel'), p_idPaymentMethod, p_idHotel);
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_PENALTY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_PENALTY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_PENALTY` (
  IN p_idPenalty DOUBLE,
  IN p_days VARCHAR(4000),
  IN p_time DOUBLE,
  IN p_money DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Penalty(idPenalty, days, time, money) 
  VALUES (nextval('s_penalty'), p_days , p_time , p_money);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_PHONENUMBER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_PHONENUMBER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_PHONENUMBER` (IN p_idPhoneNumber DOUBLE,IN p_PhoneNumber DOUBLE)
BEGIN

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO PhoneNumber (idPhoneNumber, PhoneNumber)
  VALUES (nextval('s_phonenumber'), p_PhoneNumber);
  COMMIT; 
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_PHOTO
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_PHOTO`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_PHOTO` (
  IN p_idPhoto DOUBLE,
  IN p_picture VARCHAR(4000),
  IN p_idHotel DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Photo(idPhoto, picture, idHotel ) 
  VALUES (nextval('s_photo'), p_picture, p_idHotel );
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_RESERVATION
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_RESERVATION`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_RESERVATION` (
  IN p_idUser DOUBLE,
  IN p_idPayment DOUBLE,
  IN p_idPenalty DOUBLE,
  IN p_AdminPrice DOUBLE,
  IN p_CheckIn DATETIME,
  IN p_CheckOut DATETIME,
  IN p_idRoom DOUBLE,
  IN p_idDiscount DOUBLE)
BEGIN

DECLARE p_idReservation DOUBLE;

 

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Reservation(idReservation, idUser, idPayment, idPenalty) 
  VALUES (nextval('s_reservation'), p_idUser, p_idPayment, p_idPenalty);
  COMMIT;

 -- SQLINES LICENSE FOR EVALUATION USE ONLY
 select max(idReservation)into p_idReservation  from Reservation;

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO ReservationXRoom(idReservationXRoom, AdminPrice, CheckIn, CheckOut, idReservation, idRoom, idDiscount)
  VALUES (nextval('s_reservationxroom'), p_AdminPrice, p_CheckIn, p_CheckOut, p_idReservation, p_idRoom, p_idDiscount);
  COMMIT;

END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_RESERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_RESERVATIONXROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_RESERVATIONXROOM` (
  IN p_AdminPrice DOUBLE,
  IN p_CheckIn DATETIME,
  IN p_CheckOut DATETIME,
  IN p_idReservation DOUBLE,
  IN p_idRoom DOUBLE,
  IN p_idDiscount DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO ReservationXRoom(idReservationXRoom, AdminPrice, CheckIn, CheckOut, idReservation, idRoom, idDiscount)
  VALUES (nextval('s_reservationxroom'), p_AdminPrice, p_CheckIn, p_CheckOut, p_idReservation, p_idRoom, p_idDiscount);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_REVIEW
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_REVIEW`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_REVIEW` (
 -- SQLINES DEMO *** BER,
  IN p_Star DOUBLE,
  IN p_idReservation DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Review(idReview, Star, idReservation)
  VALUES (nextval('s_review'), p_Star, p_idReservation);
  COMMIT;
  END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_ROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_ROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_ROOM` (
    IN p_Name VARCHAR(4000),
    IN p_Capacity DOUBLE,
    IN p_RecommendedPrice DOUBLE,
    IN p_IdHotel DOUBLE,
    IN p_idRoomCategory DOUBLE)
BEGIN
      -- SQLINES LICENSE FOR EVALUATION USE ONLY
      INSERT INTO Room (idRoom, Name, Capacity, RecommendedPrice, IdHotel, idRoomCategory)
      VALUES (nextval('s_room'), p_Name, p_Capacity, p_RecommendedPrice, p_IdHotel, p_idRoomCategory);
      COMMIT;

END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_ROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_ROOMCATEGORY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_ROOMCATEGORY` (
    IN p_idRoomCategory DOUBLE,
    IN p_Name VARCHAR(4000))
BEGIN
      -- SQLINES LICENSE FOR EVALUATION USE ONLY
      INSERT INTO RoomCategory (idRoomCategory, name)
      VALUES (nextval('s_roomcategory'), p_Name);
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_STATE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_STATE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_STATE` (
  IN p_idState DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_idCountry DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO State(idState, Name, idCountry)
  VALUES(NextVal('s_State'), p_Name, p_idCountry);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_USER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_USER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_USER` (
  IN p_Photo VARCHAR(4000),
  IN p_IdentificationCard VARCHAR(4000),
  IN p_FirstName VARCHAR(4000),
  IN p_MiddleName VARCHAR(4000),
  IN p_LastName VARCHAR(4000),
  IN p_SecondSurname VARCHAR(4000),
  IN p_Username VARCHAR(4000),
  IN p_Password VARCHAR(4000),
  IN p_BirthDate DATETIME,
  IN p_idDistrict DOUBLE,
  IN p_idType DOUBLE,
  IN p_idGender DOUBLE,
  IN p_idUserType DOUBLE,
  IN p_idHotelAdmin DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO Users(iduser, photo, identificationcard, firstname, middlename,
      lastname, secondsurname, username, password, birthdate,
      iddistrict, idtype, idgender, idusertype, idhoteladmin)
      VALUES (nextval('s_user'), p_Photo, p_IdentificationCard, p_FirstName, p_MiddleName,
      p_LastName, p_SecondSurname, p_Username, p_Password, p_BirthDate,p_idDistrict,
       p_idType,p_idGender, p_idUserType, p_idHotelAdmin);
  COMMIT;
  END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_USERTYPE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_USERTYPE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_USERTYPE` (
  IN p_idUserType DOUBLE,
  IN p_description VARCHAR(4000))
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO UserType(idUserType , description) 
  VALUES (NextVal('s_userType'), p_description);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_USERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_USERXNATIONALITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_USERXNATIONALITY` (
  IN p_idUserxNationality DOUBLE,
      IN p_idUser DOUBLE,
  IN p_idNationality DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO UserXNationality(idUserxNationality, idUser, idNationality)
    VALUES(nextval('s_userxnationality'), p_idUser, p_idNationality);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e INSERT_USERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`INSERT_USERXPHONENUMBER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`INSERT_USERXPHONENUMBER` (
  IN p_idUserXPhoneNumber DOUBLE,
  IN p_idUser DOUBLE,
  IN p_idPhoneNumber DOUBLE)
BEGIN
  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  INSERT INTO UserXPhoneNumber(idUserXPhoneNumber, idUser, idPhoneNumber)
  VALUES(nextval('s_userxphonenumber'), p_idUser, p_idPhoneNumber);
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e MYPROCEDURE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`MYPROCEDURE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`MYPROCEDURE` (
    k_username           VARCHAR(4000) )
BEGIN
DECLARE mycursor OUT SYS_REFCURSOR ;
  //

DELIMITER ;


BEGIN

  OPEN mycursor FOR SELECT * Users WHERE  username = k_username;
END;
END;


/
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e TESTPROC
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`TESTPROC`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`TESTPROC` (out p_cursor types.ref_cursor, in p_username varchar(4000) /* Use -meta option users.username%type */)
begin
open p_cursor for
select * from users where username = p_username;
end;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_AMENITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_AMENITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_AMENITY` (
    IN p_idAmenity DOUBLE,
    IN p_Name VARCHAR(4000),
    IN p_IdHotel DOUBLE)
BEGIN
        UPDATE Amenity
        SET name = p_Name, idHotel = p_IdHotel
        WHERE idAmenity = p_idAmenity;
        COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_AMENITYXROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_AMENITYXROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_AMENITYXROOM` (
    IN p_idAmenityXRoom DOUBLE,
    IN p_idAmenity DOUBLE,
    IN p_idRoom DOUBLE)
      BEGIN
      UPDATE AmenityXRoom
      SET idAmenity = p_idAmenity, idRoom = p_idRoom
      WHERE idAmenityXRoom = p_idAmenityXRoom;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_CANTON
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_CANTON`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_CANTON` (
  IN p_idCanton DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_idState DOUBLE)
  BEGIN
  UPDATE Canton
  SET Name = p_Name, idState = p_idState
  WHERE idCanton = p_idCanton;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_COUNTRY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_COUNTRY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_COUNTRY` (
  IN p_idCountry DOUBLE,
  IN p_Name VARCHAR(4000))
    BEGIN
    UPDATE Country
    SET Name = p_name
    WHERE Idcountry = p_idCountry;
    COMMIT;
    END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_DISCOUNT
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_DISCOUNT`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_DISCOUNT` (
    IN p_idDiscount DOUBLE,
    IN p_ExpireDate DATETIME,
    IN p_Code VARCHAR(4000),
    IN p_Percentage DOUBLE)
BEGIN 
     UPDATE Discount
     SET ExpireDate = p_ExpireDate, Code = p_Code, Percentage = p_Percentage
     WHERE  idDiscount = p_idDiscount;
     COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_DISTRICT
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_DISTRICT`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_DISTRICT` (
  IN p_idDistrict DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_idCanton DOUBLE)
  BEGIN
  UPDATE District
  SET Name = p_Name, idCanton = p_idCanton
  WHERE idDistrict = p_idDistrict;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_EMAIL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_EMAIL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_EMAIL` (
  IN p_idEmail DOUBLE,
  IN p_ElectronicMail VARCHAR(4000),
  IN p_idUser DOUBLE)
  BEGIN
  UPDATE Email
  SET ElectronicMail = p_ElectronicMail, idUser = p_idUser
  WHERE idEmail = p_idEmail;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_FAVORITE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_FAVORITE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_FAVORITE` (
  IN p_idFavorite DOUBLE,
  IN p_idUser DOUBLE,
  IN p_idHotel DOUBLE)
  BEGIN
  UPDATE Favorite
  SET idUser = p_idUser, idHotel = p_idHotel
  WHERE idFavorite = p_idFavorite;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_FEEDBACK
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_FEEDBACK`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_FEEDBACK` (
  IN p_idFeedback DOUBLE,
  IN p_comment VARCHAR(4000),
  IN p_idReservation DOUBLE)
  BEGIN
  UPDATE Feedback
  SET commment = p_comment, idReservation = p_idReservation       
  WHERE idFeedback = p_idFeedback;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_GENDER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_GENDER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_GENDER` (
  IN p_idGender DOUBLE,
  IN p_TypeGender DOUBLE)
  BEGIN
  UPDATE Gender
  SET Type = p_TypeGender
  WHERE idGender = p_idGender;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_HOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_HOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_HOTEL` (
  IN p_idHotel DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_RegisterDate DATETIME,
  IN p_idDistrict DOUBLE,
  IN p_idClasification DOUBLE,
  IN p_idDiscount DOUBLE)
  BEGIN
  UPDATE Hotel
        SET Name = p_Name, RegisterDate = p_RegisterDate, idDistrict = p_idDistrict,
    idClasification = p_idClasification, idDiscount = p_idDiscount
        WHERE idHotel = p_idHotel;
  COMMIT;
  END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_HOTELCLASIFICATION
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_HOTELCLASIFICATION`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_HOTELCLASIFICATION` (
  IN p_idHotelClasification DOUBLE,
  IN p_Name VARCHAR(4000))
  BEGIN
  UPDATE HotelClasification
  SET Name = p_Name
  WHERE idHotelClasification = p_idHotelClasification;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_IDTYPE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_IDTYPE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_IDTYPE` (
  IN p_idIDType DOUBLE,
  IN p_Mask VARCHAR(4000))
    BEGIN
    UPDATE IDType
    SET Mask = p_Mask
    WHERE ididType = p_idIDType;
    COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_NATIONALITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_NATIONALITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_NATIONALITY` (
      IN p_idNationality DOUBLE,
      IN p_name VARCHAR(4000))
  BEGIN
         UPDATE Nationality
         SET name = p_name
         WHERE idNationality = p_idNationality;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_PARAMETER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_PARAMETER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_PARAMETER` (
  IN p_idParameter DOUBLE,
  IN p_name VARCHAR(4000),
  IN p_value DOUBLE)
  BEGIN
  UPDATE Parameter 
  SET name = p_name, value = p_value        
  WHERE idParameter = p_idParameter;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_PAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_PAYMENTMETHOD`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_PAYMENTMETHOD` (
  IN p_idPaymentMethod DOUBLE,
  IN p_namePaymentMethod VARCHAR(4000))
  BEGIN
  UPDATE PaymentMethod
  SET namePaymentMethod = p_namePaymentMethod       
  WHERE idPaymentMethod = p_idPaymentMethod;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_PAYMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_PAYMENTMETHODXHOTEL`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_PAYMENTMETHODXHOTEL` (
    IN p_idPaymentMethodXHotel DOUBLE,
    IN p_idPaymentMethod DOUBLE,
    IN p_idHotel DOUBLE)
      BEGIN
      UPDATE PaymentMethodXHotel
      SET idPaymentMethod = p_idPaymentMethod, idHotel = p_idHotel
      WHERE idPaymentMethodXHotel = p_idPaymentMethodXHotel;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_PENALTY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_PENALTY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_PENALTY` (
  IN p_idPenalty DOUBLE,
  IN p_days VARCHAR(4000),
  IN p_time DOUBLE,
  IN p_money DOUBLE)
  BEGIN
  UPDATE Penalty
  SET days = p_days, time  = p_time, money = p_money        
  WHERE idPenalty = p_idPenalty;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_PHONENUMBER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_PHONENUMBER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_PHONENUMBER` (IN p_idPhoneNumber DOUBLE,IN p_PhoneNumber DOUBLE)
BEGIN
       UPDATE PhoneNumber
       SET PhoneNumber = p_PhoneNumber 
       WHERE idPhoneNumber = p_idPhoneNumber;
       COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_PHOTO
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_PHOTO`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_PHOTO` (
  IN p_idPhoto DOUBLE,
  IN p_picture VARCHAR(4000),
  IN p_idHotel DOUBLE)
  BEGIN
  UPDATE Photo 
  SET picture = p_picture, idHotel  = p_idHotel 
  WHERE idPhoto = p_idPhoto;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_RESERVATION
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_RESERVATION`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_RESERVATION` (
  IN p_idReservation DOUBLE,
  IN p_idUser DOUBLE,
  IN p_idPayment DOUBLE,
  IN p_idPenalty DOUBLE)
  BEGIN
  UPDATE Reservation
  SET idUser = p_idUser, idPayment = p_idPayment, idPenalty = p_idPenalty         
  WHERE idReservation = p_idReservation;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_RESERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_RESERVATIONXROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_RESERVATIONXROOM` (
  IN p_idReservationXRoom DOUBLE,
  IN p_AdminPrice DOUBLE,
  IN p_CheckIn DATETIME,
  IN p_CheckOut DATETIME,
  IN p_idReservation DOUBLE,
  IN p_idRoom DOUBLE,
  IN p_idDiscount DOUBLE)
  BEGIN
  UPDATE ReservationXRoom
  SET AdminPrice = p_AdminPrice, CheckIn = p_CheckIn, CheckOut = p_CheckOut, 
  idReservation = p_idReservation, idRoom = p_idRoom, idDiscount = p_idDiscount
  WHERE idReservationXRoom = p_idReservationXRoom;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_REVIEW
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_REVIEW`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_REVIEW` (
  IN p_idReview DOUBLE,
  IN p_Star DOUBLE,
  IN p_idReservation DOUBLE)
  BEGIN
  UPDATE Review
  SET Star = p_Star, idReservation = p_idReservation
  WHERE idReview = p_idReview;
  COMMIT;
  END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_ROOM
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_ROOM`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_ROOM` (
    IN p_idRoom DOUBLE,
    IN p_Name VARCHAR(4000),
    IN p_Capacity DOUBLE,
    IN p_RecommendedPrice DOUBLE,
    IN p_IdHotel DOUBLE,
    IN p_idRoomCategory DOUBLE)
BEGIN
      UPDATE Room
      SET Name = p_Name, Capacity = p_Capacity, RecommendedPrice = p_RecommendedPrice, IdHotel = p_IdHotel, idRoomCategory = p_idRoomCategory
      WHERE idRoom = p_idRoom;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_ROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_ROOMCATEGORY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_ROOMCATEGORY` (
    IN p_idRoomCategory DOUBLE,
    IN p_Name VARCHAR(4000))
      BEGIN
      UPDATE RoomCategory
      SET name = p_Name
      WHERE idRoomCategory = p_idRoomCategory;
      COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_STATE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_STATE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_STATE` (
  IN p_idState DOUBLE,
  IN p_Name VARCHAR(4000),
  IN p_idCountry DOUBLE)
  BEGIN
  UPDATE State
  SET Name = p_Name, idCountry = p_idCountry
  WHERE idState = p_idState;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_USER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_USER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_USER` (
  IN p_idUser DOUBLE,
  IN p_Photo DOUBLE,
  IN p_IdentificationCard VARCHAR(4000),
  IN p_FirstName VARCHAR(4000),
  IN p_MiddleName VARCHAR(4000),
  IN p_LastName VARCHAR(4000),
  IN p_SecondSurname VARCHAR(4000),
  IN p_Username VARCHAR(4000),
  IN p_Password VARCHAR(4000),
  IN p_BirthDate DATETIME,
  IN p_idDistrict DOUBLE,
  IN p_idType DOUBLE,
  IN p_idGender DOUBLE,
  IN p_idUserType DOUBLE,
  IN p_idHotelAdmin DOUBLE)
  BEGIN
  UPDATE Users
  SET iduser = p_idUser, photo = p_Photo, identificationcard = p_IdentificationCard, firstname = p_FirstName,
      middlename = p_MiddleName, lastname = p_LastName, secondsurname = p_SecondSurname,
      username = p_Username , password = p_Password, birthdate = p_BirthDate, iddistrict = p_idDistrict, idtype = p_idType,
      idgender = p_idGender, idusertype = p_idUserType, idhoteladmin = p_idHotelAdmin
  WHERE idUser = p_idUser;
  COMMIT;
  END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_USERTYPE
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_USERTYPE`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_USERTYPE` (
  IN p_idUserType DOUBLE,
  IN p_description VARCHAR(4000))
  BEGIN
  UPDATE UserType
  SET description = p_description       
  WHERE idUserType = p_idUserType;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_USERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_USERXNATIONALITY`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_USERXNATIONALITY` (
  IN p_idUserxNationality DOUBLE,
  IN p_idUser DOUBLE,
  IN p_idNationality DOUBLE)
  BEGIN
  UPDATE UserXNationality
      SET idUser = p_idUser, idNationality = p_idNationality
      WHERE idUserxNationality = p_idUserxNationality;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** e UPDATE_USERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------
/* set define off; */

  -- SQLINES LICENSE FOR EVALUATION USE ONLY
  DROP PROCEDURE IF EXISTS `KT`.`UPDATE_USERXPHONENUMBER`;

  DELIMITER //

  CREATE PROCEDURE `KT`.`UPDATE_USERXPHONENUMBER` (
  IN p_idUserXPhoneNumber DOUBLE,
  IN p_idUser DOUBLE,
  IN p_idPhoneNumber DOUBLE)
  BEGIN
  UPDATE UserXPhoneNumber
  SET idUser = p_idUser, idPhoneNumber = p_idPhoneNumber
  WHERE idUserXPhoneNumber = p_idUserXPhoneNumber;
  COMMIT;
END;


//

DELIMITER ;


--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** TYPES
--  SQLINES DEMO *** ------------------------------------

  /* Converted to standalone routines
CREATE OR REPLACE PACKAGE `KT`.`TYPES` AS
type ref_cursor is ref cursor;
END;


/ */
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table AMENITY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`AMENITY` ADD CONSTRAINT `NAME_AMENITY_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`AMENITY` ADD CONSTRAINT `PK_AMENITY_ID` PRIMARY KEY (`IDAMENITY`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table AMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`AMENITYXROOM` ADD CONSTRAINT `PK_AMENITYXROOM_ID` PRIMARY KEY (`IDAMENITYXROOM`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table CANTON
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`CANTON` ADD CONSTRAINT `NAME_CANTON_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`CANTON` ADD CONSTRAINT `PK_CANTON_ID` PRIMARY KEY (`IDCANTON`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table COUNTRY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`COUNTRY` ADD CONSTRAINT `NAME_COUNTRY_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`COUNTRY` ADD CONSTRAINT `PK_COUNTRY_ID` PRIMARY KEY (`IDCOUNTRY`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table DISCOUNT
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`DISCOUNT` ADD CONSTRAINT `CODEUNIQUE` UNIQUE (`CODE`)
 ;
 
  ALTER TABLE `KT`.`DISCOUNT` ADD CONSTRAINT `CODE_DISCOUNT_NN` CHECK (Code IS NOT NULL);
 
  ALTER TABLE `KT`.`DISCOUNT` ADD CONSTRAINT `EXPIREDATE_DISCOUNT_NN` CHECK (ExpireDate IS NOT NULL);
 
  ALTER TABLE `KT`.`DISCOUNT` ADD CONSTRAINT `PERCENTAGE_DISCOUNT_NN` CHECK (Percentage IS NOT NULL);
 
  ALTER TABLE `KT`.`DISCOUNT` ADD CONSTRAINT `PK_DISCOUNT_ID` PRIMARY KEY (`IDDISCOUNT`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table DISTRICT
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`DISTRICT` ADD CONSTRAINT `NAME_DISTRICT_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`DISTRICT` ADD CONSTRAINT `PK_DISCTRICT_ID` PRIMARY KEY (`IDDISTRICT`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table EMAIL
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`EMAIL` ADD CONSTRAINT `ELECTRONICMAIL_EMAIL_NN` CHECK (ElectronicMail IS NOT NULL);
 
  ALTER TABLE `KT`.`EMAIL` ADD CONSTRAINT `PK_EMAIL_ID` PRIMARY KEY (`IDEMAIL`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table FAVORITE
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`FAVORITE` ADD CONSTRAINT `PK_FAVORITE_ID` PRIMARY KEY (`IDFAVORITE`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table FEEDBACK
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`FEEDBACK` ADD CONSTRAINT `COMMENT_FEEDBACK_NN` CHECK (Commment IS NOT NULL);
 
  ALTER TABLE `KT`.`FEEDBACK` ADD CONSTRAINT `PK_FEEDBACK_ID` PRIMARY KEY (`IDFEEDBACK`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table GENDER
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`GENDER` ADD CONSTRAINT `PK_GENDER_ID` PRIMARY KEY (`IDGENDER`)
 ;
 
  ALTER TABLE `KT`.`GENDER` ADD CONSTRAINT `TYPE_GENDER_NN` CHECK (Type IS NOT NULL);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table HOTEL
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`HOTEL` ADD CONSTRAINT `NAME_HOTEL_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`HOTEL` ADD CONSTRAINT `PK_HOTEL_ID` PRIMARY KEY (`IDHOTEL`)
 ;
 
  ALTER TABLE `KT`.`HOTEL` ADD CONSTRAINT `REGISTERDATE_HOTEL_NN` CHECK (RegisterDate IS NOT NULL);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table HOTELCLASIFICATION
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`HOTELCLASIFICATION` ADD CONSTRAINT `NAME_HOTELCLASIFICATION_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`HOTELCLASIFICATION` ADD CONSTRAINT `PK_HOTELCLASIFICATION_ID` PRIMARY KEY (`IDHOTELCLASIFICATION`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table IDTYPE
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`IDTYPE` ADD CONSTRAINT `NAME_IDTYPE_NN` CHECK (name IS NOT NULL);
 
  ALTER TABLE `KT`.`IDTYPE` ADD CONSTRAINT `PK_IDTYPE_ID` PRIMARY KEY (`IDIDTYPE`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table NATIONALITY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`NATIONALITY` ADD CONSTRAINT `NAME_NATIONALITY_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`NATIONALITY` ADD CONSTRAINT `PK_NATIONALITY_ID` PRIMARY KEY (`IDNATIONALITY`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table PARAMETER
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PARAMETER` ADD CONSTRAINT `NAME_PARAMETER_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`PARAMETER` ADD CONSTRAINT `PK_PARAMETER_ID` PRIMARY KEY (`IDPARAMETER`)
 ;
 
  ALTER TABLE `KT`.`PARAMETER` ADD CONSTRAINT `VALUE_PARAMETER_NN` CHECK (Value IS NOT NULL);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table PAYMENTMETHOD
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PAYMENTMETHOD` ADD CONSTRAINT `NAME_PAYMENTMETHOD_NN` CHECK (NamePaymentMethod IS NOT NULL);
 
  ALTER TABLE `KT`.`PAYMENTMETHOD` ADD CONSTRAINT `PK_PAYMENTMETHOD_ID` PRIMARY KEY (`IDPAYMENTMETHOD`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table PAYMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PAYMENTMETHODXHOTEL` ADD CONSTRAINT `PK_PAYMENTMETHODXHOTEL_ID` PRIMARY KEY (`IDPAYMENTMETHODXHOTEL`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table PENALTY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PENALTY` ADD CONSTRAINT `PK_PENALTY_ID` PRIMARY KEY (`IDPENALTY`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table PHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PHONENUMBER` ADD CONSTRAINT `NUMBER_PHONENUMBER_NN` CHECK (PhoneNumber IS NOT NULL);
 
  ALTER TABLE `KT`.`PHONENUMBER` ADD CONSTRAINT `PK_PHONENUMBER_ID` PRIMARY KEY (`IDPHONENUMBER`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table PHOTO
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PHOTO` ADD CONSTRAINT `PICTURE_PHOTO_NN` CHECK (Picture IS NOT NULL);
 
  ALTER TABLE `KT`.`PHOTO` ADD CONSTRAINT `PK_PHOTO_ID` PRIMARY KEY (`IDPHOTO`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table RESERVATION
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`RESERVATION` ADD CONSTRAINT `PK_RESERVATION_ID` PRIMARY KEY (`IDRESERVATION`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table RESERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `ADMINPRICE_RESERVATIONXROOM_NN` CHECK (AdminPrice IS NOT NULL);
 
  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `CHECKIN_RESERVATIONXROOM_NN` CHECK (CheckIn IS NOT NULL);
 
  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `CHECKOUT_RESERVATIONXROOM_NN` CHECK (CheckOut IS NOT NULL);
 
  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `PK_RESERVATIONXROOM_ID` PRIMARY KEY (`IDRESERVATIONXROOM`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table REVIEW
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`REVIEW` ADD CONSTRAINT `PK_REVIEW_ID` PRIMARY KEY (`IDREVIEW`)
 ;
 
  ALTER TABLE `KT`.`REVIEW` ADD CONSTRAINT `STAR_REVIEW_NN` CHECK (Star IS NOT NULL);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table ROOM
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`ROOM` ADD CONSTRAINT `CAPACITY_ROOM_NN` CHECK (Capacity IS NOT NULL);
 
  ALTER TABLE `KT`.`ROOM` ADD CONSTRAINT `NAME_ROOM_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`ROOM` ADD CONSTRAINT `PK_ROOM_ID` PRIMARY KEY (`IDROOM`)
 ;
 
  ALTER TABLE `KT`.`ROOM` ADD CONSTRAINT `RECOMMENDEDPRICE_ROOM_NN` CHECK (RecommendedPrice IS NOT NULL);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table ROOMCATEGORY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`ROOMCATEGORY` ADD CONSTRAINT `NAME_ROOMCATEGORY_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`ROOMCATEGORY` ADD CONSTRAINT `PK_ROOMCATEGORY_ID` PRIMARY KEY (`IDROOMCATEGORY`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table STATE
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`STATE` ADD CONSTRAINT `NAME_STATE_NN` CHECK (Name IS NOT NULL);
 
  ALTER TABLE `KT`.`STATE` ADD CONSTRAINT `PK_STATE_ID` PRIMARY KEY (`IDSTATE`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table USERS
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `BIRTHDATE_USER_NN` CHECK (BirthDate IS NOT NULL);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `FIRSTNAME_USER_NN` CHECK (FirstName IS NOT NULL);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `IDENTIFICATIONCARD_USER_NN` CHECK (IdentificationCard IS NOT NULL);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `LASTNAME_USER_NN` CHECK (LastName IS NOT NULL);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `PASSWORD_USER_NN` CHECK (Password IS NOT NULL);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `PK_USER_ID` PRIMARY KEY (`IDUSER`)
 ;
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `USERNAME_USER_NN` CHECK (Username IS NOT NULL);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table USERTYPE
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERTYPE` ADD CONSTRAINT `DESCRIPTION_USERTYPE_NN` CHECK (Description IS NOT NULL);
 
  ALTER TABLE `KT`.`USERTYPE` ADD CONSTRAINT `PK_USERTYPE_ID` PRIMARY KEY (`IDUSERTYPE`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table USERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERXNATIONALITY` ADD CONSTRAINT `PK_USERXNATIONALITY_ID` PRIMARY KEY (`IDUSERXNATIONALITY`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** Table USERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERXPHONENUMBER` ADD CONSTRAINT `PK_USERXPHONENUMBER_ID` PRIMARY KEY (`IDUSERXPHONENUMBER`)
   ;
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table AMENITY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`AMENITY` ADD CONSTRAINT `FK_IDHOTEL_AMENITY` FOREIGN KEY (`IDHOTEL`)
	  REFERENCES `KT`.`HOTEL` (`IDHOTEL`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table AMENITYXROOM
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`AMENITYXROOM` ADD CONSTRAINT `FK_IDAMENITY_AMENITYXROOM` FOREIGN KEY (`IDAMENITY`)
	  REFERENCES `KT`.`AMENITY` (`IDAMENITY`);
 
  ALTER TABLE `KT`.`AMENITYXROOM` ADD CONSTRAINT `FK_IDROOM_AMENITYXROOM` FOREIGN KEY (`IDROOM`)
	  REFERENCES `KT`.`ROOM` (`IDROOM`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table CANTON
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`CANTON` ADD CONSTRAINT `FK_IDSTATE_CANTON` FOREIGN KEY (`IDSTATE`)
	  REFERENCES `KT`.`STATE` (`IDSTATE`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table DISTRICT
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`DISTRICT` ADD CONSTRAINT `FK_IDCANTON_DISTRICT` FOREIGN KEY (`IDCANTON`)
	  REFERENCES `KT`.`CANTON` (`IDCANTON`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table EMAIL
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`EMAIL` ADD CONSTRAINT `FK_IDUSER_EMAIL` FOREIGN KEY (`IDUSER`)
	  REFERENCES `KT`.`USERS` (`IDUSER`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table FAVORITE
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`FAVORITE` ADD CONSTRAINT `FK_IDHOTEL_FAVORITE` FOREIGN KEY (`IDHOTEL`)
	  REFERENCES `KT`.`HOTEL` (`IDHOTEL`);
 
  ALTER TABLE `KT`.`FAVORITE` ADD CONSTRAINT `FK_IDUSER_FAVORITE` FOREIGN KEY (`IDUSER`)
	  REFERENCES `KT`.`USERS` (`IDUSER`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table FEEDBACK
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`FEEDBACK` ADD CONSTRAINT `FK_IDRESERVATION_FEEDBACK` FOREIGN KEY (`IDRESERVATION`)
	  REFERENCES `KT`.`RESERVATION` (`IDRESERVATION`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table HOTEL
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`HOTEL` ADD CONSTRAINT `FK_IDCLASIFICATION_HOTEL` FOREIGN KEY (`IDCLASIFICATION`)
	  REFERENCES `KT`.`HOTELCLASIFICATION` (`IDHOTELCLASIFICATION`);
 
  ALTER TABLE `KT`.`HOTEL` ADD CONSTRAINT `FK_IDDISCOUNT_HOTEL` FOREIGN KEY (`IDDISCOUNT`)
	  REFERENCES `KT`.`DISCOUNT` (`IDDISCOUNT`);
 
  ALTER TABLE `KT`.`HOTEL` ADD CONSTRAINT `FK_IDDISTRICT_HOTEL` FOREIGN KEY (`IDDISTRICT`)
	  REFERENCES `KT`.`DISTRICT` (`IDDISTRICT`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table PAYMENTMETHODXHOTEL
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PAYMENTMETHODXHOTEL` ADD CONSTRAINT `FK_IDHOTEL_PAYMENTMXHOTEL` FOREIGN KEY (`IDHOTEL`)
	  REFERENCES `KT`.`HOTEL` (`IDHOTEL`);
 
  ALTER TABLE `KT`.`PAYMENTMETHODXHOTEL` ADD CONSTRAINT `FK_IDPAYMENTM_PAYMENTMXHOTEL` FOREIGN KEY (`IDPAYMENTMETHOD`)
	  REFERENCES `KT`.`PAYMENTMETHOD` (`IDPAYMENTMETHOD`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table PHOTO
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`PHOTO` ADD CONSTRAINT `FK_IDHOTEL_PHOTO` FOREIGN KEY (`IDHOTEL`)
	  REFERENCES `KT`.`HOTEL` (`IDHOTEL`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table RESERVATION
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`RESERVATION` ADD CONSTRAINT `FK_IDPAYMENT_RESERVATION` FOREIGN KEY (`IDPAYMENT`)
	  REFERENCES `KT`.`PAYMENTMETHOD` (`IDPAYMENTMETHOD`);
 
  ALTER TABLE `KT`.`RESERVATION` ADD CONSTRAINT `FK_IDPENALTY_RESERVATION` FOREIGN KEY (`IDPENALTY`)
	  REFERENCES `KT`.`PENALTY` (`IDPENALTY`);
 
  ALTER TABLE `KT`.`RESERVATION` ADD CONSTRAINT `FK_IDUSER_RESERVATION` FOREIGN KEY (`IDUSER`)
	  REFERENCES `KT`.`USERS` (`IDUSER`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table RESERVATIONXROOM
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `FK_IDDISCOUNT_RESERVXROOM` FOREIGN KEY (`IDDISCOUNT`)
	  REFERENCES `KT`.`DISCOUNT` (`IDDISCOUNT`);
 
  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `FK_IDRESERVATION_RESERVXROOM` FOREIGN KEY (`IDRESERVATION`)
	  REFERENCES `KT`.`RESERVATION` (`IDRESERVATION`);
 
  ALTER TABLE `KT`.`RESERVATIONXROOM` ADD CONSTRAINT `FK_IDROOM_RESERVXROOM` FOREIGN KEY (`IDROOM`)
	  REFERENCES `KT`.`ROOM` (`IDROOM`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table REVIEW
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`REVIEW` ADD CONSTRAINT `FK_IDRESERVATION_REVIEW` FOREIGN KEY (`IDRESERVATION`)
	  REFERENCES `KT`.`RESERVATION` (`IDRESERVATION`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table ROOM
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`ROOM` ADD CONSTRAINT `FK_IDHOTEL_ROOM` FOREIGN KEY (`IDHOTEL`)
	  REFERENCES `KT`.`HOTEL` (`IDHOTEL`);
 
  ALTER TABLE `KT`.`ROOM` ADD CONSTRAINT `FK_IDROOMCATEGORY_ROOM` FOREIGN KEY (`IDROOMCATEGORY`)
	  REFERENCES `KT`.`ROOMCATEGORY` (`IDROOMCATEGORY`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table STATE
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`STATE` ADD CONSTRAINT `FK_IDCOUNTRY_STATE` FOREIGN KEY (`IDCOUNTRY`)
	  REFERENCES `KT`.`COUNTRY` (`IDCOUNTRY`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table USERS
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `FK_IDDISTRICT_USER` FOREIGN KEY (`IDDISTRICT`)
	  REFERENCES `KT`.`DISTRICT` (`IDDISTRICT`);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `FK_IDGENDER_USER` FOREIGN KEY (`IDGENDER`)
	  REFERENCES `KT`.`GENDER` (`IDGENDER`);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `FK_IDHOTELADMIN_USER` FOREIGN KEY (`IDHOTELADMIN`)
	  REFERENCES `KT`.`HOTEL` (`IDHOTEL`);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `FK_IDTYPE_USER` FOREIGN KEY (`IDTYPE`)
	  REFERENCES `KT`.`IDTYPE` (`IDIDTYPE`);
 
  ALTER TABLE `KT`.`USERS` ADD CONSTRAINT `FK_IDUSERTYPE_USER` FOREIGN KEY (`IDUSERTYPE`)
	  REFERENCES `KT`.`USERTYPE` (`IDUSERTYPE`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table USERXNATIONALITY
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERXNATIONALITY` ADD CONSTRAINT `FK_IDNATIONALITY_USERXNAT` FOREIGN KEY (`IDNATIONALITY`)
	  REFERENCES `KT`.`NATIONALITY` (`IDNATIONALITY`);
 
  ALTER TABLE `KT`.`USERXNATIONALITY` ADD CONSTRAINT `FK_IDUSER_USERXNAT` FOREIGN KEY (`IDUSER`)
	  REFERENCES `KT`.`USERS` (`IDUSER`);
--  SQLINES DEMO *** ------------------------------------
-- SQLINES DEMO *** for Table USERXPHONENUMBER
--  SQLINES DEMO *** ------------------------------------

  ALTER TABLE `KT`.`USERXPHONENUMBER` ADD CONSTRAINT `FK_IDPHONENUMBER_USERXPHONE` FOREIGN KEY (`IDPHONENUMBER`)
	  REFERENCES `KT`.`PHONENUMBER` (`IDPHONENUMBER`);
 
  ALTER TABLE `KT`.`USERXPHONENUMBER` ADD CONSTRAINT `FK_IDUSER_USERXPHONE` FOREIGN KEY (`IDUSER`)
	  REFERENCES `KT`.`USERS` (`IDUSER`);
